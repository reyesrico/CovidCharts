{"version":3,"sources":["components/Footer.tsx","components/Instructions.tsx","components/Loading.tsx","helpers/CovidHelper.tsx","helpers/Service.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Footer","className","href","target","rel","Component","Instructions","countrySelected","this","props","onClick","event","localStorage","setItem","value","Loading","size","message","getSize","type","color","height","width","hasProvince","country","some","row","Province","hasCity","City","createMap","provinces","forEach","newRow","Object","keys","includes","push","getUniqueCities","map","province","label","filter","index","self","indexOf","sort","city","name","getCityData","manageCountryData","length","confirmedInc","Confirmed","i","lastRow","increment","getProvinces","usMap","p","updateDates","data","Date","moment","format","headers","api","getCountry","axios","get","App","state","defaultCountrySlug","getItem","menu","all","countryData","countries","Country","isLoading","provinceData","provinceSelected","cities","citySelected","getCountryInfo","setState","then","res","finally","sorted","sortBy","id","Slug","prevProps","prevState","isEqual","managed","windowWidth","window","innerWidth","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","strokeDasharray","stroke","fillOpacity","fill","countryText","countryHasProvince","countryHasCity","onChange","options","renderChart","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.634ead55.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Footer.scss';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <div>\r\n          Covid Charts&trade; is a platform coded by &nbsp;\r\n          <a href=\"http://stuffie.azurewebsites.net/PM_Carlos-Reyes2.html\" target=\"_blank\" rel=\"noopener noreferrer\">Carlos Reyes-Rico</a>.\r\n        </div>\r\n        <div>Why?: Click <a href=\"https://github.com/reyesrico/CovidCharts/blob/master/README.md\">here</a></div>\r\n        <div>Code: <a href=\"https://github.com/reyesrico/CovidCharts\">https://github.com/reyesrico/CovidCharts</a></div>\r\n        <div>Contact and Follow Me! Twitter: <a href=\"https://twitter.com/reyesrico\">@reyesrico</a></div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './Instructions.scss';\r\n\r\nexport default class Instructions extends Component<any, any> {\r\n  render() {\r\n    const { countrySelected } = this.props;\r\n\r\n    return (\r\n      <div className=\"instructions\"> \r\n        <h4 className=\"instructions__title\">Instructions</h4>\r\n        <ol className=\"instructions__list\">\r\n          <li>Select a country</li>\r\n          <li>If country has states data: select a state</li>\r\n          <li>If country has cities data: select a city</li>\r\n        </ol>\r\n        <div className=\"instructions__examples\">\r\n          <div>Flatten Curves Examples: <b>Germany, Korea (South), United States (NY, NY)</b></div>\r\n          <button\r\n            className=\"instructions__button\"\r\n            onClick={event => event && localStorage.setItem(\"country\", countrySelected.value)}>\r\n            Save Default Country\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } \r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactLoading from 'react-loading';\r\nimport { LoadingProps } from '../types/types';\r\n\r\nimport './Loading.scss';\r\n\r\nclass Loading extends Component<LoadingProps, any> {\r\n  getSize(): number {\r\n    switch(this.props.size) {\r\n      case 'sm':\r\n        return 8;\r\n      case 'md':\r\n        return 16;\r\n      case 'lg':\r\n        return 32;\r\n      case 'xl':\r\n        return 64;\r\n      default:\r\n        return 8;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { message } = this.props;\r\n    const size = this.getSize();\r\n\r\n    return (\r\n      <div className=\"stuffie-loading\">\r\n        <ReactLoading type=\"spin\" color=\"#00f\" height={size} width={size} />\r\n        {message && (<div className=\"stuffie-loading__message\">{message}</div>)} \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n ","import moment from 'moment';\r\nimport { CountryDataRow } from \"../types/types\";\r\n\r\nexport const hasProvince = (country: CountryDataRow[]): boolean => {\r\n  return country && country.some((row: CountryDataRow) => row.Province !== \"\");\r\n}\r\n\r\nexport const hasCity = (country: CountryDataRow[]): boolean => {\r\n  return country && country.some((row: CountryDataRow) => row.City !== \"\");\r\n}\r\n\r\nexport const createMap = (country: CountryDataRow[]): any => {\r\n  let provinces = {};\r\n\r\n  country.forEach((row: CountryDataRow) => {\r\n    const Province = row.Province === '' ? 'Undefined' : row.Province;\r\n    const City = row.City === '' ? 'Undefined' : row.City;\r\n    const newRow = { ...row, Province, City };\r\n\r\n    let pKeys = Object.keys(provinces);\r\n\r\n    if (pKeys.includes(newRow.Province)) {\r\n      // @ts-ignore\r\n      provinces[newRow.Province].push(newRow);\r\n    } else {\r\n      provinces = { ...provinces, [newRow.Province]: [newRow] };\r\n    }\r\n  });\r\n\r\n  return provinces;\r\n}\r\n\r\nexport const getUniqueCities = (map: any, province: any) => {\r\n  let provinceData: any = map[province.label];\r\n\r\n  return provinceData.map((row: CountryDataRow) => row.City)\r\n  .filter((value: any, index: number, self: any) => self.indexOf(value) === index)\r\n  .sort()\r\n  .map((city: string) => {\r\n    return { value: city, name: city, label: city };\r\n  });\r\n}\r\n\r\nexport const getCityData = (map: any, province: any, city: any) => {\r\n  let provinceData: any = map[province.label];\r\n\r\n  return provinceData.filter((row: CountryDataRow) => row.City === city.label);\r\n}\r\n\r\nexport const manageCountryData = (country: CountryDataRow[]) => {\r\n  if (!country.length) return;\r\n\r\n  let row: CountryDataRow = country[0];\r\n\r\n  let confirmedInc: number[] = [row.Confirmed];\r\n\r\n  for(let i = 1; i < country.length; i++) {\r\n    row = country[i];\r\n    let lastRow: CountryDataRow = country[i-1];\r\n    let increment = row.Confirmed - lastRow.Confirmed;\r\n    confirmedInc[i] = increment;\r\n  }\r\n\r\n  let countryData = country.map((row: CountryDataRow, index: number) => {\r\n    return { ...row, Confirmed: confirmedInc[index] };\r\n  });\r\n\r\n  return countryData;\r\n}\r\n\r\nexport const getProvinces = (usMap: any) => {\r\n  return Object.keys(usMap).sort().map((p: string) => {\r\n    return { name: p, label: p, value: p };\r\n  });\r\n}\r\n\r\nexport const updateDates = (data: CountryDataRow[]) => {\r\n  return data.map((row: CountryDataRow) => {\r\n    return { ...row, Date: moment(row.Date).format(\"MMM Do\")};\r\n  });\r\n}\r\n","import axios from 'axios';\r\n\r\nconst headers = {\r\n    'cache-control': 'no-cache',\r\n    'x-apikey': '5c932ad1cac6621685acc11e'\r\n};\r\n\r\nconst api = {\r\n  default: () => `https://api.covid19api.com/`,\r\n  all: () => `https://api.covid19api.com/all`,\r\n  countries: () => `https://api.covid19api.com/countries`,\r\n  country: (country: string) => `https://api.covid19api.com/dayone/country/${country}`,  \r\n};\r\n\r\nexport const getDefault = () => (\r\n  axios.get(api.default(), { headers })\r\n);\r\n\r\nexport const getAll = () => (\r\n  axios.get(api.all(), { headers })\r\n);\r\n\r\nexport const getCountry = (country: string) => (\r\n  axios.get(api.country(country), { headers })\r\n);\r\n\r\nexport const getCountries = () => (\r\n  axios.get(api.countries(), { headers })\r\n);\r\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { isEqual, sortBy } from 'lodash';\n\nimport Footer from './components/Footer';\nimport Instructions from './components/Instructions';\nimport Loading from './components/Loading';\nimport { CountryDataRow } from './types/types';\nimport { hasProvince, hasCity, createMap, getUniqueCities, getCityData, manageCountryData, getProvinces, updateDates } from './helpers/CovidHelper';\nimport { getCountry, getCountries } from './helpers/Service';\n\nimport './App.scss';\n\nclass App extends Component<any, any> {\n  state = {\n    defaultCountrySlug: localStorage.getItem('country') || 'mexico',\n    menu: { 'fn': null },\n    all: null,\n    country: [],\n    countryData: [],\n    countries: [],\n    countrySelected: { name: null, Country: '', value: '', label: null },\n    isLoading: false,\n    provinces: [],\n    provinceData: [],\n    provinceSelected: { name: null, value: '', label: null },\n    cities: [],\n    citySelected: { name: null, value: '', label: null },\n    usMap: {}\n  }\n\n  componentDidMount() {\n    const { defaultCountrySlug } = this.state;\n\n    getCountries().then((res: any) => {\n      let sorted = sortBy(res.data, ['Slug']);\n      let id = 0;\n      let countries = sorted.map((row: any, index: number) => {\n        if (row.Slug === defaultCountrySlug) {\n          id = index;\n        }\n        return { ...row, value: row.Slug, label: row.Country, name: row.Slug };\n      });\n\n      this.setState({ countries, countrySelected: countries[id] });\n    });\n  }\n\n  componentDidUpdate(prevProps: any, prevState: any) {\n    if (!this.state.isLoading) {\n      if(!isEqual(prevState.countrySelected, this.state.countrySelected)) {\n        this.getCountryInfo();\n      } else {\n        if (!isEqual(prevState.provinceSelected, this.state.provinceSelected)) {\n          if (hasCity(this.state.country)) {\n            let cities = getUniqueCities(this.state.usMap, this.state.provinceSelected);\n            this.setState({ cities, citySelected: cities[0] });\n          }\n        }\n      }  \n    }\n  }\n\n  getCountryInfo = () => {\n    const { countrySelected } = this.state;\n\n    this.setState({ isLoading: true });\n\n    getCountry(countrySelected.value)\n    .then(res => {\n      const country = res.data;\n      let usMap, provinces, provinceSelected, cities, citySelected;\n\n      if (hasProvince(country)) {\n        usMap = createMap(country);\n        provinces = getProvinces(usMap);\n        provinceSelected = provinces[0];\n\n        if (hasCity(country)) {\n          cities = getUniqueCities(usMap, provinceSelected);\n          citySelected = cities[0];  \n        }\n\n        this.setState({ usMap, country, cities, provinces, provinceSelected, citySelected });\n      } else {\n        this.setState({\n          country,\n          usMap: {},\n          provinceSelected: { name: null },\n          provinces: [],\n          provinceData: [],\n          citySelected: { name: null },\n          cities: []\n        });\n      }\n    })\n    .finally(() => this.setState({ isLoading: false }));\n  }\n\n\n  renderChart(country: CountryDataRow[], managed: boolean = false) {\n    const { provinceSelected, usMap, citySelected } = this.state;\n    let data = hasCity(country)? getCityData(usMap, provinceSelected, citySelected):\n                // @ts-ignore\n               hasProvince(country)? usMap[provinceSelected.label]:\n               country;\n\n    data = updateDates(data);\n    data = managed ? manageCountryData(data) : data;\n\n    if (!data || !data.length) return <div>No data</div>;\n\n    const windowWidth = window.innerWidth;\n    const width = windowWidth >= 500 ? 500 : (windowWidth * 0.8); \n\n    return (\n      <AreaChart width={width} height={250} data={data}\n      margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n      <defs>\n        <linearGradient id=\"colorDeaths\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n          <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n        </linearGradient>\n        <linearGradient id=\"colorConfirmed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n          <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n        </linearGradient>\n      </defs>\n      <XAxis dataKey=\"Date\" />\n      <YAxis />\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <Tooltip />\n      <Area type=\"monotone\" dataKey=\"Confirmed\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorConfirmed)\" />\n      <Area type=\"monotone\" dataKey=\"Deaths\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorDeaths)\" />\n    </AreaChart>\n    );\n  }\n\n  render() {\n    const { country, countries, countrySelected, isLoading, provinces, provinceSelected, cities, citySelected } = this.state;\n\n    let countryText = countrySelected.label ?? 'Country';\n    if (!countries.length || isLoading) return (<Loading size=\"xl\" message={`Loading ${countryText} Data`} />);\n\n    let countryHasProvince = hasProvince(country);\n    let countryHasCity = hasCity(country);\n\n    return (\n      <div className=\"covid\">\n        <h2 className=\"covid__title\">COVID {countrySelected.label} Charts</h2>\n        <Instructions countrySelected={countrySelected} />\n        <div className=\"covid__dropdowns\">\n          <Select onChange={(countrySelected: any) => this.setState({ countrySelected })} options={countries} value={countrySelected} />\n          {countryHasProvince && <Select onChange={(provinceSelected: any) => this.setState({ provinceSelected })} options={provinces} value={provinceSelected} />}\n          {countryHasCity && <Select onChange={(citySelected: any ) => this.setState({ citySelected })} options={cities} value={citySelected} />}\n        </div>\n        <hr />\n        <div className=\"covid__charts\">\n          <h3 className=\"covid__chart-text\">Total Confirmed and Deaths</h3>\n          {this.renderChart(country)}\n          <hr />\n          <h3 className=\"covid__chart-text\">Incremental Confirmed (To Date - One Day Before) and Deaths</h3>\n          {this.renderChart(country, true)}\n          <hr />\n          <div className=\"covid__texts\">\n            <div className=\"covid__text\">{countrySelected.label}</div>\n            {countryHasProvince && <div className=\"covid__text\">{provinceSelected?.label}</div>}\n            {countryHasCity && <div className=\"covid__text\">{citySelected?.label}</div>}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}