{"version":3,"sources":["components/Footer.tsx","components/Instructions.tsx","components/Loading.tsx","helpers/charts.js","components/MakeChart.tsx","helpers/CovidHelper.tsx","helpers/Service.tsx","components/ChartOptions.jsx","components/CompareChart.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Footer","className","href","target","rel","Component","Instructions","countrySelected","this","props","onClick","event","localStorage","setItem","value","Loading","size","message","getSize","type","color","height","width","options","chart","zoomType","title","text","legend","enabled","xAxis","tooltip","shared","credits","plotOptions","areaspline","fillOpacity","MakeChart","state","series","yValues","Confirmed","Deaths","Recovered","Active","ConfirmedInc","DeathsInc","RecoveredInc","ActiveInc","clearYValues","Object","keys","forEach","yValue","setState","yValuesFalse","values","reduce","acc","val","renderOptions","map","index","checked","key","name","id","onChange","changeInput","getData","data","confirmed","deaths","recovered","active","confirmedInc","deathsInc","recoveredInc","activeInc","row","push","moment","Date","valueOf","lastRow","renderChart","isEmpty","highcharts","Highcharts","prevProps","prevState","isEqual","hasProvince","country","some","Province","hasCity","City","createMap","provinces","newRow","includes","getUniqueCities","province","label","filter","self","indexOf","sort","city","getCityData","manageCountryData","length","i","getProvinces","usMap","p","updateDates","format","headers","api","getCountry","axios","get","ChartOptions","selected","choice","CompareChart","isLoading","countryData","selectedY","getCountryInfo","countryCompare","hasProvinces","then","res","finally","otherCountry","Country","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","strokeDasharray","stroke","fill","App","defaultCountrySlug","getItem","menu","all","countries","provinceData","provinceSelected","cities","citySelected","isError","catch","managed","changeDates","renderTitle","windowWidth","window","innerWidth","sorted","sortBy","Slug","countryHasProvince","countryText","countryHasCity","renderCompareChart","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.9e713798.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Footer.scss';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <div>\r\n          Covid Charts&trade; is a platform coded by &nbsp;\r\n          <a href=\"http://stuffie.azurewebsites.net/PM_Carlos-Reyes2.html\" target=\"_blank\" rel=\"noopener noreferrer\">Carlos Reyes-Rico</a>.\r\n        </div>\r\n        <div>Why?: Click <a href=\"https://github.com/reyesrico/CovidCharts/blob/master/README.md\">here</a></div>\r\n        <div>Code: <a href=\"https://github.com/reyesrico/CovidCharts\">https://github.com/reyesrico/CovidCharts</a></div>\r\n        <div>Contact and Follow Me! Twitter: <a href=\"https://twitter.com/reyesrico\">@reyesrico</a></div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './Instructions.scss';\r\n\r\nexport default class Instructions extends Component<any, any> {\r\n  render() {\r\n    const { countrySelected } = this.props;\r\n\r\n    return (\r\n      <div className=\"instructions\"> \r\n        <h4 className=\"instructions__title\">Instructions</h4>\r\n        <ol className=\"instructions__list\">\r\n          <li>Select a country</li>\r\n          <li>If country has states data: select a state</li>\r\n          <li>If country has cities data: select a city</li>\r\n        </ol>\r\n        <div className=\"instructions__examples\">\r\n          <div>Flatten Curves Examples: <b>Germany, Korea (South), United States (NY, NY)</b></div>\r\n          <button\r\n            className=\"instructions__button\"\r\n            onClick={event => event && localStorage.setItem(\"country\", countrySelected.value)}>\r\n            Save Default Country\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } \r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactLoading from 'react-loading';\r\nimport { LoadingProps } from '../types/types';\r\n\r\nimport './Loading.scss';\r\n\r\nclass Loading extends Component<LoadingProps, any> {\r\n  getSize(): number {\r\n    switch(this.props.size) {\r\n      case 'sm':\r\n        return 8;\r\n      case 'md':\r\n        return 16;\r\n      case 'lg':\r\n        return 32;\r\n      case 'xl':\r\n        return 64;\r\n      default:\r\n        return 8;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { message } = this.props;\r\n    const size = this.getSize();\r\n\r\n    return (\r\n      <div className=\"stuffie-loading\">\r\n        <ReactLoading type=\"spin\" color=\"#00f\" height={size} width={size} />\r\n        {message && (<div className=\"stuffie-loading__message\">{message}</div>)} \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n ","const legend = {\r\n  enabled: false\r\n};\r\n\r\nconst options = {\r\n  chart: { height: 250, zoomType: 'x' },\r\n  title: { text: '' },\r\n  legend,\r\n  xAxis: { type: 'datetime' },\r\n  tooltip: { shared: true },\r\n  credits: { enabled: false },\r\n  plotOptions: {\r\n    areaspline: { fillOpacity: 0.1 }\r\n  }\r\n};\r\n\r\nexport default options;\r\n","import React, { Component } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport moment from 'moment';\r\nimport { isEqual, isEmpty } from 'lodash';\r\n\r\nimport options from '../helpers/charts';\r\nimport { MakeChartProps, CountryDataRow } from '../types/types';\r\n\r\nimport './MakeChart.scss';\r\n\r\n// Highcharts React wrapper\r\n// https://www.highcharts.com/blog/tutorials/highcharts-react-wrapper/\r\n\r\nclass MakeChart extends Component<MakeChartProps, any> {\r\n  state = {\r\n    series: {},\r\n    yValues: {\r\n      Confirmed: true,\r\n      Deaths: false,\r\n      Recovered: false,\r\n      Active: false,\r\n      ConfirmedInc: false,\r\n      DeathsInc: false,\r\n      RecoveredInc: false,\r\n      ActiveInc: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: MakeChartProps, prevState: any) {\r\n    const { yValues } = this.state;\r\n    if (!isEqual(prevState.yValues, yValues)) {\r\n      \r\n      if(this.yValuesFalse()) {\r\n        this.clearYValues();\r\n      } else {\r\n        this.getData();\r\n      }\r\n    }\r\n  }\r\n\r\n  clearYValues = () => {\r\n    let yValues: any = {};\r\n\r\n    Object.keys(this.state.yValues).forEach(yValue => {\r\n      const value = yValue === 'Confirmed' ? true : false;\r\n      yValues = { ...yValues, [yValue]: value };\r\n    });\r\n\r\n    this.setState({ yValues });\r\n  }\r\n\r\n  yValuesFalse = () => {\r\n    const res = Object.values(this.state.yValues).reduce((acc: boolean, val: boolean) => {\r\n      return acc || val;\r\n    });\r\n\r\n    return !res;\r\n  }\r\n\r\n  changeInput(yValue: string) {\r\n    // @ts-ignore\r\n    const value: any = this.state.yValues[yValue];\r\n\r\n    const yValues: { [key: string]: boolean } = { ...this.state.yValues };\r\n    yValues[yValue] = !value;\r\n\r\n    this.setState({ yValues });\r\n  }\r\n\r\n  renderOptions = () => {\r\n    const { yValues } = this.state;\r\n   \r\n    return (\r\n      <div className=\"make-chart__options\">\r\n        <div className=\"make-chart__values\">Values (Y Axis)</div>\r\n        {Object.keys(yValues).map((yValue: string, index: number) => {\r\n          // @ts-ignore\r\n          const checked = yValues[yValue];\r\n          return (\r\n            <div key={index}>\r\n              <input checked={checked} type=\"checkbox\" name=\"yaxis\" value={yValue} id={yValue}\r\n                onChange={event => event && this.changeInput(yValue)}/>\r\n              {yValue}\r\n            </div>);\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getData = () => {\r\n    const { data } = this.props;\r\n    const { yValues } = this.state;\r\n\r\n    if (!this.yValuesFalse()) {\r\n      let confirmed: any = [];\r\n      let deaths: any = [];\r\n      let recovered: any = [];\r\n      let active: any = [];\r\n      let confirmedInc: any = [];\r\n      let deathsInc: any = [];\r\n      let recoveredInc: any = [];\r\n      let activeInc: any = [];\r\n\r\n      data.forEach((row: CountryDataRow, index: number) => {\r\n        yValues.Confirmed && confirmed.push([moment(row.Date).valueOf(), row.Confirmed]);\r\n        yValues.Deaths && deaths.push([moment(row.Date).valueOf(), row.Deaths]);\r\n        yValues.Recovered && recovered.push([moment(row.Date).valueOf(), row.Recovered]);\r\n        yValues.Active && active.push([moment(row.Date).valueOf(), row.Active]);\r\n\r\n        // Incrementals\r\n        if (index === 0) {\r\n          yValues.ConfirmedInc && confirmedInc.push([moment(row.Date).valueOf(), 0]);\r\n          yValues.DeathsInc && deathsInc.push([moment(row.Date).valueOf(), 0]);\r\n          yValues.RecoveredInc && recoveredInc.push([moment(row.Date).valueOf(), 0]);\r\n          yValues.ActiveInc && activeInc.push([moment(row.Date).valueOf(), 0]);\r\n        } else {\r\n          let lastRow = data[index-1];\r\n          yValues.ConfirmedInc && confirmedInc.push([moment(row.Date).valueOf(), row.Confirmed - lastRow.Confirmed]);\r\n          yValues.DeathsInc && deathsInc.push([moment(row.Date).valueOf(), row.Deaths - lastRow.Deaths]);\r\n          yValues.RecoveredInc && recoveredInc.push([moment(row.Date).valueOf(), row.Recovered - lastRow.Recovered]);\r\n          yValues.ActiveInc && activeInc.push([moment(row.Date).valueOf(), row.Active - lastRow.Active]);\r\n        }\r\n      });\r\n\r\n      let series = [];\r\n      yValues.Confirmed && series.push({ type: 'area', name: 'Confirmed', data: confirmed });\r\n      yValues.Deaths && series.push({ type: 'area', name: 'Deaths', data: deaths });\r\n      yValues.Recovered && series.push({ type: 'area', name: 'Recovered', data: recovered });\r\n      yValues.Active && series.push({ type: 'area', name: 'Active', data: active });\r\n      yValues.ConfirmedInc && series.push({ type: 'area', name: 'ConfirmedInc', data: confirmedInc });\r\n      yValues.DeathsInc && series.push({ type: 'area', name: 'DeathsInc', data: deathsInc });\r\n      yValues.RecoveredInc && series.push({ type: 'area', name: 'RecoveredInc', data: recoveredInc });\r\n      yValues.ActiveInc && series.push({ type: 'area', name: 'ActiveInc', data: activeInc });\r\n\r\n      this.setState({ series });  \r\n    } \r\n  }\r\n\r\n  renderChart = () => {\r\n    const { width } = this.props;\r\n    const { series } = this.state;\r\n    const plotOptions = {\r\n      ...options,\r\n      chart: { ...options.chart, width },\r\n      series\r\n    };\r\n\r\n    if (!isEmpty(series)) {\r\n      return (<HighchartsReact highcharts={Highcharts} options={plotOptions} />);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"make-chart\">\r\n        {this.renderOptions()}\r\n        <hr />\r\n        {this.renderChart()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MakeChart;\r\n","import moment from 'moment';\r\nimport { CountryDataRow } from \"../types/types\";\r\n\r\nexport const hasProvince = (country: CountryDataRow[]): boolean => {\r\n  return country && country.some((row: CountryDataRow) => row.Province !== \"\");\r\n}\r\n\r\nexport const hasCity = (country: CountryDataRow[]): boolean => {\r\n  return country && country.some((row: CountryDataRow) => row.City !== \"\");\r\n}\r\n\r\nexport const createMap = (country: CountryDataRow[]): any => {\r\n  let provinces = {};\r\n\r\n  country.forEach((row: CountryDataRow) => {\r\n    const Province = row.Province === '' ? 'Undefined' : row.Province;\r\n    const City = row.City === '' ? 'Undefined' : row.City;\r\n    const newRow = { ...row, Province, City };\r\n\r\n    let pKeys = Object.keys(provinces);\r\n\r\n    if (pKeys.includes(newRow.Province)) {\r\n      // @ts-ignore\r\n      provinces[newRow.Province].push(newRow);\r\n    } else {\r\n      provinces = { ...provinces, [newRow.Province]: [newRow] };\r\n    }\r\n  });\r\n\r\n  return provinces;\r\n}\r\n\r\nexport const getUniqueCities = (map: any, province: any) => {\r\n  let provinceData: any = map[province.label];\r\n\r\n  return provinceData.map((row: CountryDataRow) => row.City)\r\n  .filter((value: any, index: number, self: any) => self.indexOf(value) === index)\r\n  .sort()\r\n  .map((city: string) => {\r\n    return { value: city, name: city, label: city };\r\n  });\r\n}\r\n\r\nexport const getCityData = (map: any, province: any, city: any) => {\r\n  let provinceData: any = map[province.label];\r\n\r\n  return provinceData.filter((row: CountryDataRow) => row.City === city.label);\r\n}\r\n\r\nexport const manageCountryData = (country: CountryDataRow[]) => {\r\n  if (!country.length) return;\r\n\r\n  let row: CountryDataRow = country[0];\r\n\r\n  let confirmedInc: number[] = [row.Confirmed];\r\n  let deathsInc: number[] = [row.Deaths];\r\n\r\n  for(let i = 1; i < country.length; i++) {\r\n    row = country[i];\r\n    let lastRow: CountryDataRow = country[i-1];\r\n    confirmedInc[i] = row.Confirmed - lastRow.Confirmed;\r\n    deathsInc[i] = row.Deaths - lastRow.Deaths;\r\n  }\r\n\r\n  let countryData = country.map((row: CountryDataRow, index: number) => {\r\n    return { ...row, Confirmed: confirmedInc[index] };\r\n  });\r\n\r\n  return countryData;\r\n}\r\n\r\nexport const getProvinces = (usMap: any) => {\r\n  return Object.keys(usMap).sort().map((p: string) => {\r\n    return { name: p, label: p, value: p };\r\n  });\r\n}\r\n\r\nexport const updateDates = (data: CountryDataRow[]) => {\r\n  return data.map((row: CountryDataRow) => {\r\n    return { ...row, Date: moment(row.Date).format(\"MMM Do\")};\r\n  });\r\n}\r\n","import axios from 'axios';\r\n\r\nconst headers = {\r\n    'cache-control': 'no-cache',\r\n    'x-apikey': '5c932ad1cac6621685acc11e'\r\n};\r\n\r\nconst api = {\r\n  default: () => `https://api.covid19api.com/`,\r\n  all: () => `https://api.covid19api.com/all`,\r\n  countries: () => `https://api.covid19api.com/countries`,\r\n  country: (country: string) => `https://api.covid19api.com/dayone/country/${country}`,  \r\n};\r\n\r\nexport const getDefault = () => (\r\n  axios.get(api.default(), { headers })\r\n);\r\n\r\nexport const getAll = () => (\r\n  axios.get(api.all(), { headers })\r\n);\r\n\r\nexport const getCountry = (country: string) => (\r\n  axios.get(api.country(country), { headers })\r\n);\r\n\r\nexport const getCountries = () => (\r\n  axios.get(api.countries(), { headers })\r\n);\r\n","import React from 'react';\r\nimport './ChartOptions.scss';\r\n\r\nconst ChartOptions = ({ options, selected, onChange }) => {\r\n  return (\r\n    <div className=\"chart-options\">\r\n      {options.map((choice, index) => (\r\n        <label key={index}>\r\n          <input type=\"radio\"\r\n            name=\"vote\"\r\n            value={choice.value}\r\n            key={index}\r\n            checked={selected === choice.value}\r\n            onChange={onChange} />\r\n          {choice.text}\r\n        </label>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartOptions;\r\n","import React, { Component } from 'react';\r\nimport { isEqual } from 'lodash';\r\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\r\n\r\nimport ChartOptions from './ChartOptions';\r\nimport { CountryDataRow, CompareChartProps } from '../types/types';\r\nimport { getCountry } from '../helpers/Service';\r\nimport { updateDates } from '../helpers/CovidHelper';\r\n\r\nimport './CompareChart.scss';\r\n\r\nclass CompareChart extends Component<CompareChartProps, any> {\r\n  state = {\r\n    isLoading: false,\r\n    countryData: [],\r\n    yValues: [\r\n      { value: 'Confirmed', text: 'Confirmed' }, \r\n      { value: 'Deaths', text: 'Deaths' },\r\n      { value: 'Recovered', text: 'Recovered' }, \r\n      { value: 'Active', text: 'Active' },\r\n    ],\r\n    selectedY: 'Confirmed'\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCountryInfo();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: CompareChartProps, prevState: any) {\r\n    const { countryCompare } = this.props;\r\n\r\n    if (!isEqual(prevProps.countryCompare, countryCompare)) {\r\n      this.getCountryInfo();\r\n    }\r\n  }\r\n\r\n  getCountryInfo = () => {\r\n    const { countryCompare, hasProvinces } = this.props;\r\n    this.setState({ countryData: [] });\r\n\r\n    if (!hasProvinces) {\r\n      this.setState({ isLoading: true });\r\n\r\n      getCountry(countryCompare.value)\r\n      .then(res => this.setState({ countryData: res.data }))\r\n      .finally(() => this.setState({ isLoading: false }));\r\n    }\r\n  }\r\n\r\n\r\n  getData = () => {\r\n    const { data, countryCompare } = this.props;\r\n    const { countryData, selectedY } = this.state;\r\n\r\n    let series: any = [];\r\n\r\n    if(data.length && countryData.length) {\r\n      let map: any = {};\r\n\r\n      countryData.forEach((row: CountryDataRow) => {\r\n        map = { ...map, [row.Date]: row };\r\n      });\r\n\r\n      series = data.map((row: CountryDataRow) => {\r\n        let otherCountry: CountryDataRow = map[row.Date];\r\n\r\n        return {\r\n          // @ts-ignore\r\n          [row.Country]: row[selectedY],\r\n          // @ts-ignore\r\n          [countryCompare.label]: otherCountry ? otherCountry[selectedY] : 0,\r\n          Date: row.Date\r\n        };\r\n      });\r\n    }\r\n\r\n    return series;\r\n  }\r\n\r\n\r\n  renderChart = () => {\r\n    const { width } = this.props;\r\n    let data = this.getData();\r\n\r\n    if (!data || !data.length) return <div>Data no available</div>;\r\n\r\n    data = updateDates(data);\r\n    let keys = Object.keys(data[0]);\r\n\r\n    return (\r\n      <AreaChart width={width} height={250} data={data}\r\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\r\n        <defs>\r\n          <linearGradient id=\"color1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\r\n            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\r\n          </linearGradient>\r\n          <linearGradient id=\"color2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\r\n            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\r\n          </linearGradient>\r\n        </defs>\r\n        <XAxis dataKey=\"Date\" />\r\n        <YAxis />\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <Tooltip />\r\n        <Area type=\"monotone\" dataKey={keys[0]} stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#color1)\" />\r\n        <Area type=\"monotone\" dataKey={keys[1]} stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#color2)\" />\r\n      </AreaChart>);\r\n  }\r\n\r\n  renderOptions = () => {\r\n    const { yValues, selectedY } = this.state;\r\n   \r\n    return (\r\n      <div className=\"compare-chart__options\">\r\n        <div className=\"compare-chart__values\">Values (Y Axis)</div>\r\n        <ChartOptions options={yValues} selected={selectedY}\r\n          onChange={(event: any) => event && this.setState({ selectedY: event.target.value })} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { hasProvinces } = this.props;\r\n\r\n    if (hasProvinces) return <div>Country not available to compare</div>;\r\n\r\n    return (\r\n      <div className=\"compare-chart\">\r\n        {this.renderOptions()}\r\n        <hr />\r\n        {this.renderChart()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CompareChart;","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { isEqual, sortBy } from 'lodash';\n\nimport Footer from './components/Footer';\nimport Instructions from './components/Instructions';\nimport Loading from './components/Loading';\nimport MakeChart from './components/MakeChart';\nimport { CountryDataRow } from './types/types';\nimport { hasProvince, hasCity, createMap, getUniqueCities, getCityData, manageCountryData, getProvinces, updateDates } from './helpers/CovidHelper';\nimport { getCountry, getCountries } from './helpers/Service';\n\nimport './App.scss';\nimport CompareChart from './components/CompareChart';\n\nclass App extends Component<any, any> {\n  state = {\n    defaultCountrySlug: localStorage.getItem('country') || 'mexico',\n    menu: { 'fn': null },\n    all: null,\n    country: [],\n    countryData: [],\n    countries: [],\n    countrySelected: { name: null, Country: '', value: '', label: null },\n    countryCompare: { name: null, Country: '', value: '', label: null },\n    isLoading: false,\n    provinces: [],\n    provinceData: [],\n    provinceSelected: { name: null, value: '', label: null },\n    cities: [],\n    citySelected: { name: null, value: '', label: null },\n    usMap: {},\n    isError: false,\n    width: 500\n  }\n\n  componentDidMount() {\n    const { defaultCountrySlug } = this.state;\n    const windowWidth = window.innerWidth;\n    const width = windowWidth >= 500 ? 500 : (windowWidth * 0.8);\n\n    getCountries().then((res: any) => {\n      let sorted = sortBy(res.data, ['Slug']);\n      let id = 0;\n      let countries = sorted.map((row: any, index: number) => {\n        if (row.Slug === defaultCountrySlug) {\n          id = index;\n        }\n        return { ...row, value: row.Slug, label: row.Country, name: row.Slug };\n      });\n\n      this.setState({ countries, countrySelected: countries[id], countryCompare: countries[81], width });\n    });\n  }\n\n  componentDidUpdate(prevProps: any, prevState: any) {\n    if (this.state.isError) {\n      this.getCountryInfo();\n    } else if (!this.state.isLoading) {\n      if (!isEqual(prevState.countrySelected, this.state.countrySelected)) {\n        this.getCountryInfo();\n      } else {\n        if (!isEqual(prevState.provinceSelected, this.state.provinceSelected)) {\n          if (hasCity(this.state.country)) {\n            let cities = getUniqueCities(this.state.usMap, this.state.provinceSelected);\n            this.setState({ cities, citySelected: cities[0] });\n          }\n        }\n      }\n    }\n  }\n\n  getCountryInfo = () => {\n    const { countrySelected } = this.state;\n\n    this.setState({ isLoading: true, isError: false });\n\n    getCountry(countrySelected.value)\n      .then(res => {\n        const country = res.data;\n        let usMap, provinces, provinceSelected, cities, citySelected;\n\n        if (hasProvince(country)) {\n          usMap = createMap(country);\n          provinces = getProvinces(usMap);\n          provinceSelected = provinces[0];\n\n          if (hasCity(country)) {\n            cities = getUniqueCities(usMap, provinceSelected);\n            citySelected = cities[0];\n          }\n\n          this.setState({ usMap, country, cities, provinces, provinceSelected, citySelected });\n        } else {\n          this.setState({\n            country,\n            usMap: {},\n            provinceSelected: { name: null },\n            provinces: [],\n            provinceData: [],\n            citySelected: { name: null },\n            cities: []\n          });\n        }\n      })\n      .catch(() => this.setState({ isError: true }))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  getData = (country: CountryDataRow[], managed: boolean = false, changeDates: boolean = true) => {\n    const { usMap, citySelected, provinceSelected } = this.state;\n\n    let data = hasCity(country) ? getCityData(usMap, provinceSelected, citySelected) :\n      // @ts-ignore\n      hasProvince(country) ? usMap[provinceSelected.label] :\n        country;\n\n    data = changeDates ? updateDates(data) : data;\n\n    return managed ? manageCountryData(data) : data;\n  }\n\n  renderChart(country: CountryDataRow[], managed: boolean = false, compare: boolean = true) {\n    const { width } = this.state;\n\n    let data = this.getData(country, managed);\n\n    if (!data || !data.length) return <div>No data</div>;\n\n    return (\n      <AreaChart width={width} height={250} data={data}\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n        <defs>\n          <linearGradient id=\"colorDeaths\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n          </linearGradient>\n          <linearGradient id=\"colorConfirmed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis dataKey=\"Date\" />\n        <YAxis />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        <Area type=\"monotone\" dataKey=\"Confirmed\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorConfirmed)\" />\n        <Area type=\"monotone\" dataKey=\"Deaths\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorDeaths)\" />\n      </AreaChart>\n    );\n  }\n\n  renderCompareChart(countryHasProvince: boolean) {\n    const { country, countries, countryCompare, width} = this.state;\n    return (\n      <div className=\"covid__chart\">\n        <h3 className=\"covid__chart-text\">Compare with other country</h3>\n        <div className=\"covid__chart-select\">\n          <Select onChange={(countryCompare: any) => this.setState({ countryCompare })} options={countries} value={countryCompare} />\n        </div>\n        {country.length && <CompareChart data={this.getData(country, false, false)} width={width} countryCompare={countryCompare} hasProvinces={countryHasProvince} />}\n      </div>\n    );\n  }\n  \n  renderTitle = () => {\n    const { citySelected, provinceSelected, countrySelected } = this.state;\n    return citySelected?.label ?? provinceSelected?.label  ?? countrySelected.label;\n  }\n\n  render() {\n    const { country, countries, countrySelected, isLoading, provinces,\n      provinceSelected, cities, citySelected, usMap, width, isError } = this.state;\n\n    let countryText = countrySelected.label ?? 'Country';\n    if (!countries.length || isLoading) return (<Loading size=\"xl\" message={`Loading ${countryText} Data`} />);\n\n    let countryHasProvince = hasProvince(country);\n    let countryHasCity = hasCity(country);\n\n    return (\n      <div className=\"covid\">\n        <h2 className=\"covid__title\">COVID {countrySelected.label} Charts</h2>\n        <h3 className=\"covid__subtitle\">Data Source: <a href=\"https://github.com/CSSEGISandData/COVID-19\">Johns Hopkins CSSE</a></h3>\n        <Instructions countrySelected={countrySelected} />\n        {isError && <div className=\"covid__error\">Error Getting Data: Try Again</div>}\n        <div className=\"covid__dropdowns\">\n          <Select onChange={(countrySelected: any) => this.setState({ countrySelected })} options={countries} value={countrySelected} />\n          {countryHasProvince && <Select onChange={(provinceSelected: any) => this.setState({ provinceSelected })} options={provinces} value={provinceSelected} />}\n          {countryHasCity && <Select onChange={(citySelected: any) => this.setState({ citySelected })} options={cities} value={citySelected} />}\n        </div>\n        <hr />\n        <div className=\"covid__charts\">\n          <h3 className=\"covid__chart-text\">Total Confirmed and Deaths</h3>\n          {this.renderChart(country)}\n          <hr />\n          <h3 className=\"covid__chart-text\">Incremental Confirmed (To Date - One Day Before) and Deaths</h3>\n          {this.renderChart(country, true)}\n          <hr />\n          {!countryHasProvince && this.renderCompareChart(countryHasProvince)}\n          <hr />\n          <h3 className=\"covid__chart-text\">Make Your Own {this.renderTitle()} Chart</h3>\n          <MakeChart countries={countries} data={this.getData(country, false, false)} map={usMap} width={width} />\n          <hr />\n          <div className=\"covid__texts\">\n            <div className=\"covid__text\">{countrySelected.label}</div>\n            {countryHasProvince && <div className=\"covid__text\">{provinceSelected?.label}</div>}\n            {countryHasCity && <div className=\"covid__text\">{citySelected?.label}</div>}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}