{"version":3,"sources":["components/ChartOptions.jsx","helpers/Service.tsx","helpers/CovidHelper.tsx","components/CompareChart.tsx","components/Loading.tsx","helpers/charts.js","helpers/predictionsHelper.js","components/CovidPredictions.tsx","components/Footer.tsx","components/Instructions.tsx","components/MakeChart.tsx","helpers/ProjectionsHelper.js","components/Projections.tsx","components/ProjectionsHW.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ChartOptions","options","selected","onChange","className","map","choice","index","key","type","name","value","checked","text","headers","api","country","getCountry","axios","get","hasProvince","some","row","Province","hasCity","City","createMap","provinces","forEach","newRow","Object","keys","includes","push","getUniqueCities","province","label","filter","self","indexOf","sort","city","getCityData","manageCountryData","length","confirmedInc","Confirmed","deathsInc","Deaths","i","lastRow","getProvinces","usMap","p","updateDates","data","Date","moment","format","CompareChart","state","isLoading","countryData","yValues","selectedY","getCountryInfo","props","countryCompare","hasProvinces","setState","then","res","finally","getData","series","otherCountry","Country","renderChart","width","height","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","strokeDasharray","stroke","fillOpacity","fill","renderOptions","event","target","this","prevProps","prevState","isEqual","Component","Loading","size","message","showProgress","getSize","color","chart","zoomType","title","legend","enabled","xAxis","tooltip","shared","credits","plotOptions","areaspline","processData","timePortion","Promise","resolve","reject","trainX","trainY","features","scaledData","minMaxScaler","getMin","getMax","scaledFeatures","j","ex","console","log","min","max","originalData","generateNextDayPrediction","minMaxInverseScaler","Math","prototype","addDays","days","date","valueOf","setDate","getDate","clearPrint","CovidPredictions","epochs","predictedData","predictedDates","buildCnn","model","tf","add","inputLayer","inputShape","conv1d","kernelSize","filters","strides","useBias","activation","kernelInitializer","averagePooling1d","poolSize","flatten","dense","units","cnn","summary","compile","optimizer","loss","fit","tensorTrainX","tensorTrainY","result","epoch","history","loadData","labels","nextDayPrediction","built","tensorData","reshape","predictedX","predict","nextDayPredictionScaled","tensorNextDayPrediction","predValue","inversePredictedValue","pred","predictedXInverse","Array","slice","call","trainYInverse","getSeries","current","predicted","predictedValue","highcharts","Highcharts","Footer","href","rel","Instructions","countrySelected","onClick","localStorage","setItem","MakeChart","Recovered","Active","ConfirmedInc","DeathsInc","RecoveredInc","ActiveInc","clearYValues","yValue","yValuesFalse","values","reduce","acc","val","changeInput","confirmed","deaths","recovered","active","recoveredInc","activeInc","isEmpty","computeSMA","window_size","r_avgs","curr_avg","t","k","set","avg","trainModel","inputs","outputs","trainingsize","n_epochs","learning_rate","n_layers","callback","a","input_layer_shape","input_layer_neurons","rnn_input_shape","rnn_batch_size","X","floor","Y","xs","div","ys","targetShape","lstm_cells","lstmCell","rnn","cell","returnSequences","adam","batchSize","callbacks","onEpochEnd","hist","stats","makePredictions","predictedResults","mul","from","dataSync","Projections","projectedData","trainedData","modelTrained","readingEpoch","windowSize","epochSize","trainingSize","learningRate","hiddenLayers","predValues","predTimestamps","loadingTrain","clearState","showProjected","trained","counter","trainedRow","round","epoch_loss","learningrate","n_hiddenlayers","outps","pred_vals","timestamps_c","splice","disabled","renderLoading","forecast","require","ProjectionsHW","predictions","period","getPredictions","alpha","beta","gamma","limit","valuesLimited","dateSize","typeSeries","typeIndex","App","defaultCountrySlug","getItem","menu","all","countries","provinceData","provinceSelected","cities","citySelected","isError","catch","managed","changeDates","renderTitle","windowWidth","window","innerWidth","sorted","sortBy","Slug","countryHasProvince","countryText","countryHasCity","renderCompareChart","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.42208098.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ChartOptions.scss';\r\n\r\nconst ChartOptions = ({ options, selected, onChange }) => {\r\n  return (\r\n    <div className=\"chart-options\">\r\n      {options.map((choice, index) => (\r\n        <label key={index}>\r\n          <input type=\"radio\"\r\n            name=\"vote\"\r\n            value={choice.value}\r\n            key={index}\r\n            checked={selected === choice.value}\r\n            onChange={onChange} />\r\n          {choice.text}\r\n        </label>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartOptions;\r\n","import axios from 'axios';\r\n\r\nconst headers = {\r\n    'cache-control': 'no-cache',\r\n    'x-apikey': '5c932ad1cac6621685acc11e'\r\n};\r\n\r\nconst api = {\r\n  default: () => `https://api.covid19api.com/`,\r\n  all: () => `https://api.covid19api.com/all`,\r\n  countries: () => `https://api.covid19api.com/countries`,\r\n  country: (country: string) => `https://api.covid19api.com/dayone/country/${country}`,  \r\n};\r\n\r\nexport const getDefault = () => (\r\n  axios.get(api.default(), { headers })\r\n);\r\n\r\nexport const getAll = () => (\r\n  axios.get(api.all(), { headers })\r\n);\r\n\r\nexport const getCountry = (country: string) => (\r\n  axios.get(api.country(country), { headers })\r\n);\r\n\r\nexport const getCountries = () => (\r\n  axios.get(api.countries(), { headers })\r\n);\r\n","import moment from 'moment';\r\nimport CountryDataRow from \"../types/CountryDataRow\";\r\n\r\nexport const hasProvince = (country: CountryDataRow[]): boolean => {\r\n  return country && country.some((row: CountryDataRow) => row.Province !== \"\");\r\n}\r\n\r\nexport const hasCity = (country: CountryDataRow[]): boolean => {\r\n  return country && country.some((row: CountryDataRow) => row.City !== \"\");\r\n}\r\n\r\nexport const createMap = (country: CountryDataRow[]): any => {\r\n  let provinces = {};\r\n\r\n  country.forEach((row: CountryDataRow) => {\r\n    const Province = row.Province === '' ? 'Undefined' : row.Province;\r\n    const City = row.City === '' ? 'Undefined' : row.City;\r\n    const newRow = { ...row, Province, City };\r\n\r\n    let pKeys = Object.keys(provinces);\r\n\r\n    if (pKeys.includes(newRow.Province)) {\r\n      // @ts-ignore\r\n      provinces[newRow.Province].push(newRow);\r\n    } else {\r\n      provinces = { ...provinces, [newRow.Province]: [newRow] };\r\n    }\r\n  });\r\n\r\n  return provinces;\r\n}\r\n\r\nexport const getUniqueCities = (map: any, province: any) => {\r\n  let provinceData: any = map[province.label];\r\n\r\n  return provinceData.map((row: CountryDataRow) => row.City)\r\n  .filter((value: any, index: number, self: any) => self.indexOf(value) === index)\r\n  .sort()\r\n  .map((city: string) => {\r\n    return { value: city, name: city, label: city };\r\n  });\r\n}\r\n\r\nexport const getCityData = (map: any, province: any, city: any) => {\r\n  let provinceData: any = map[province.label];\r\n\r\n  return provinceData.filter((row: CountryDataRow) => row.City === city.label);\r\n}\r\n\r\nexport const manageCountryData = (country: CountryDataRow[]) => {\r\n  if (!country.length) return;\r\n\r\n  let row: CountryDataRow = country[0];\r\n\r\n  let confirmedInc: number[] = [row.Confirmed];\r\n  let deathsInc: number[] = [row.Deaths];\r\n\r\n  for(let i = 1; i < country.length; i++) {\r\n    row = country[i];\r\n    let lastRow: CountryDataRow = country[i-1];\r\n    confirmedInc[i] = row.Confirmed - lastRow.Confirmed;\r\n    deathsInc[i] = row.Deaths - lastRow.Deaths;\r\n  }\r\n\r\n  let countryData = country.map((row: CountryDataRow, index: number) => {\r\n    return { ...row, Confirmed: confirmedInc[index] };\r\n  });\r\n\r\n  return countryData;\r\n}\r\n\r\nexport const getProvinces = (usMap: any) => {\r\n  return Object.keys(usMap).sort().map((p: string) => {\r\n    return { name: p, label: p, value: p };\r\n  });\r\n}\r\n\r\nexport const updateDates = (data: CountryDataRow[]) => {\r\n  return data.map((row: CountryDataRow) => {\r\n    return { ...row, Date: moment(row.Date).format(\"MMM Do\")};\r\n  });\r\n}\r\n","import React, { Component } from 'react';\r\nimport { isEqual } from 'lodash';\r\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\r\n\r\nimport ChartOptions from './ChartOptions';\r\nimport CompareChartProps from '../types/CompareChartProps';\r\nimport CountryDataRow from '../types/CountryDataRow';\r\nimport { getCountry } from '../helpers/Service';\r\nimport { updateDates } from '../helpers/CovidHelper';\r\n\r\nimport './CompareChart.scss';\r\n\r\nclass CompareChart extends Component<CompareChartProps, any> {\r\n  state = {\r\n    isLoading: false,\r\n    countryData: [],\r\n    yValues: [\r\n      { value: 'Confirmed', text: 'Confirmed' }, \r\n      { value: 'Deaths', text: 'Deaths' },\r\n      { value: 'Recovered', text: 'Recovered' }, \r\n      { value: 'Active', text: 'Active' },\r\n    ],\r\n    selectedY: 'Confirmed'\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCountryInfo();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: CompareChartProps, prevState: any) {\r\n    const { countryCompare } = this.props;\r\n\r\n    if (!isEqual(prevProps.countryCompare, countryCompare)) {\r\n      this.getCountryInfo();\r\n    }\r\n  }\r\n\r\n  getCountryInfo = () => {\r\n    const { countryCompare, hasProvinces } = this.props;\r\n    this.setState({ countryData: [] });\r\n\r\n    if (!hasProvinces) {\r\n      this.setState({ isLoading: true });\r\n\r\n      getCountry(countryCompare.value)\r\n      .then(res => this.setState({ countryData: res.data }))\r\n      .finally(() => this.setState({ isLoading: false }));\r\n    }\r\n  }\r\n\r\n\r\n  getData = () => {\r\n    const { data, countryCompare } = this.props;\r\n    const { countryData, selectedY } = this.state;\r\n\r\n    let series: any = [];\r\n\r\n    if(data.length && countryData.length) {\r\n      let map: any = {};\r\n\r\n      countryData.forEach((row: CountryDataRow) => {\r\n        map = { ...map, [row.Date]: row };\r\n      });\r\n\r\n      series = data.map((row: CountryDataRow) => {\r\n        let otherCountry: CountryDataRow = map[row.Date];\r\n\r\n        return {\r\n          // @ts-ignore\r\n          [row.Country]: row[selectedY],\r\n          // @ts-ignore\r\n          [countryCompare.label]: otherCountry ? otherCountry[selectedY] : 0,\r\n          Date: row.Date\r\n        };\r\n      });\r\n    }\r\n\r\n    return series;\r\n  }\r\n\r\n\r\n  renderChart = () => {\r\n    const { width } = this.props;\r\n    let data = this.getData();\r\n\r\n    if (!data || !data.length) return <div>Data no available</div>;\r\n\r\n    data = updateDates(data);\r\n    let keys = Object.keys(data[0]);\r\n\r\n    return (\r\n      <AreaChart width={width} height={250} data={data}\r\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\r\n        <defs>\r\n          <linearGradient id=\"color1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\r\n            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\r\n          </linearGradient>\r\n          <linearGradient id=\"color2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\r\n            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\r\n          </linearGradient>\r\n        </defs>\r\n        <XAxis dataKey=\"Date\" />\r\n        <YAxis />\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <Tooltip />\r\n        <Area type=\"monotone\" dataKey={keys[0]} stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#color1)\" />\r\n        <Area type=\"monotone\" dataKey={keys[1]} stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#color2)\" />\r\n      </AreaChart>);\r\n  }\r\n\r\n  renderOptions = () => {\r\n    const { yValues, selectedY } = this.state;\r\n   \r\n    return (\r\n      <div className=\"compare-chart__options\">\r\n        <div className=\"compare-chart__values\">Values (Y Axis)</div>\r\n        <ChartOptions options={yValues} selected={selectedY}\r\n          onChange={(event: any) => event && this.setState({ selectedY: event.target.value })} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { hasProvinces } = this.props;\r\n\r\n    if (hasProvinces) return <div>Country not available to compare</div>;\r\n\r\n    return (\r\n      <div className=\"compare-chart\">\r\n        {this.renderOptions()}\r\n        <hr />\r\n        {this.renderChart()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CompareChart;","import React, { Component } from 'react';\r\nimport ReactLoading from 'react-loading';\r\nimport LoadingProps from '../types/LoadingProps';\r\n\r\nimport './Loading.scss';\r\n\r\nclass Loading extends Component<LoadingProps, any> {\r\n  getSize(): number {\r\n    switch(this.props.size) {\r\n      case 'sm':\r\n        return 8;\r\n      case 'md':\r\n        return 16;\r\n      case 'lg':\r\n        return 32;\r\n      case 'xl':\r\n        return 64;\r\n      default:\r\n        return 8;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { message, showProgress } = this.props;\r\n    const size = this.getSize();\r\n\r\n    return (\r\n      <div className={showProgress? \"stuffie-loading-progress\" : \"stuffie-loading\"}>\r\n        <ReactLoading type=\"spin\" color=\"#00f\" height={size} width={size} />\r\n        {message && (<div className=\"stuffie-loading__message\">{message}</div>)} \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n ","const legend = {\r\n  enabled: false\r\n};\r\n\r\nconst options = {\r\n  chart: { height: 250, zoomType: 'x' },\r\n  title: { text: '' },\r\n  legend,\r\n  xAxis: { type: 'datetime' },\r\n  tooltip: { shared: true },\r\n  credits: { enabled: false },\r\n  plotOptions: {\r\n    areaspline: { fillOpacity: 0.1 }\r\n  }\r\n};\r\n\r\nexport default options;\r\n","/*\r\n    Process the Finance API response (data)\r\n    Create the train freatures and labels for cnn\r\n    Each prediction is base on previous timePortion days\r\n    ex. timePortion=7, prediction for the next day is based to values of the previous 7 days\r\n*/\r\nexport const processData = function (data, type, timePortion) {\r\n  return new Promise(function (resolve, reject) {\r\n      let trainX = [], trainY = [], size = data.length;\r\n\r\n      let features = [];\r\n      for (let i = 0; i < size; i++) {\r\n          features.push(data[i][type]);                            // AQUI ESTAN LOS VALUES\r\n      }\r\n\r\n      // Scale the values\r\n      var scaledData = minMaxScaler(features, getMin(features), getMax(features));\r\n      let scaledFeatures = scaledData.data;\r\n   \r\n      try {\r\n          // Create the train sets\r\n          for (let i = timePortion; i < size; i++) {\r\n\r\n              for (let j = (i - timePortion); j < i; j++) {\r\n                  trainX.push(scaledFeatures[j]);\r\n              }\r\n\r\n              trainY.push(scaledFeatures[i]);\r\n          }\r\n\r\n      } catch (ex) {\r\n          resolve(ex);\r\n          console.log(ex);\r\n      }\r\n\r\n      return resolve({\r\n          size: (size - timePortion),\r\n          timePortion: timePortion,\r\n          trainX: trainX,\r\n          trainY: trainY,\r\n          min: scaledData.min,\r\n          max: scaledData.max,\r\n          originalData: features,\r\n      })\r\n  });\r\n};\r\n\r\n\r\n/*\r\n  This will take the last timePortion days from the data\r\n  and they will be used to predict the next day stock price\r\n*/\r\nexport const generateNextDayPrediction = function (data, timePortion) {\r\n  let size = data.length;\r\n  let features = [];\r\n\r\n  for (let i = (size - timePortion); i < size; i++) {\r\n      features.push(data[i]);\r\n  }\r\n  \r\n  return features;\r\n}\r\n\r\n/*\r\n  Scaling feature using min-max normalization.\r\n  All values will be between 0 and 1\r\n*/\r\nexport const minMaxScaler = function (data, min, max) {\r\n\r\n  let scaledData = data.map(function (value) {\r\n      return (value - min) / (max - min);\r\n  });\r\n  \r\n  return {\r\n      data: scaledData,\r\n      min: min,\r\n      max: max\r\n  }\r\n}\r\n\r\n\r\n/*\r\n  Revert min-max normalization and get the real values\r\n*/\r\nexport const minMaxInverseScaler = function (data, min, max) {\r\n\r\n  let scaledData = data.map(function (value) {\r\n      return value * (max - min) + min;\r\n  });\r\n\r\n  return {\r\n      data: scaledData,\r\n      min: min,\r\n      max: max\r\n  }\r\n}\r\n\r\n\r\n/*\r\n  Get min value from array\r\n*/\r\nexport const getMin = function (data) {\r\n  return Math.min(...data);\r\n} \r\n\r\n\r\n/*\r\n  Get max value from array\r\n*/\r\nexport const getMax = function (data) {\r\n  return Math.max(...data);\r\n} \r\n\r\n\r\n/*\r\n  Adds days to given date\r\n*/\r\n// eslint-disable-next-line\r\nDate.prototype.addDays = function(days) {\r\n  var date = new Date(this.valueOf());\r\n  date.setDate(date.getDate() + days);\r\n  return date;\r\n}\r\n\r\n\r\n/*\r\n  Add text in the html view\r\n*/\r\nexport const print = function (text) {\r\n  console.log(text)\r\n};\r\n\r\n\r\n/*\r\n  Clear the html view\r\n*/\r\nexport const clearPrint = function () {\r\n  console.log('clearPrint');\r\n}\r\n","import React, { Component } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport moment from 'moment';\r\nimport { isEqual } from 'lodash';\r\n\r\nimport CountryDataRow from '../types/CountryDataRow';\r\nimport Loading from './Loading';\r\nimport ProjectionsProps from '../types/ProjectionsProps';\r\nimport options from '../helpers/charts';\r\nimport './CovidPredictions.scss';\r\n\r\nimport { clearPrint, processData, generateNextDayPrediction, minMaxScaler, minMaxInverseScaler } from '../helpers/predictionsHelper';\r\n\r\nclass CovidPredictions extends Component<ProjectionsProps, any> {\r\n  state = {\r\n    epochs: 100,\r\n    timePortion: 7,\r\n    predictedData: [],\r\n    predictedDates: [],\r\n    isLoading: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: ProjectionsProps, prevState: any) {\r\n    if (!isEqual(prevProps, this.props)) {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  buildCnn = (data: any) => {\r\n    return new Promise((resolve, reject) => {\r\n      // Linear (sequential) stack of layers\r\n      const model = tf.sequential();\r\n\r\n      // Define input layer\r\n      model.add(tf.layers.inputLayer({\r\n        inputShape: [7, 1],\r\n      }));\r\n\r\n      // Add the first convolutional layer\r\n      model.add(tf.layers.conv1d({\r\n        kernelSize: 2,\r\n        filters: 128,\r\n        strides: 1,\r\n        useBias: true,\r\n        activation: 'relu',\r\n        kernelInitializer: 'VarianceScaling'\r\n      }));\r\n\r\n      // Add the Average Pooling layer\r\n      model.add(tf.layers.averagePooling1d({\r\n        poolSize: [2],\r\n        strides: [1]\r\n      }));\r\n\r\n      // Add the second convolutional layer\r\n      model.add(tf.layers.conv1d({\r\n        kernelSize: 2,\r\n        filters: 64,\r\n        strides: 1,\r\n        useBias: true,\r\n        activation: 'relu',\r\n        kernelInitializer: 'VarianceScaling'\r\n      }));\r\n\r\n      // Add the Average Pooling layer\r\n      model.add(tf.layers.averagePooling1d({\r\n        poolSize: [2],\r\n        strides: [1]\r\n      }));\r\n\r\n      // Add Flatten layer, reshape input to (number of samples, number of features)\r\n      model.add(tf.layers.flatten({\r\n\r\n      }));\r\n\r\n      // Add Dense layer, \r\n      model.add(tf.layers.dense({\r\n        units: 1,\r\n        kernelInitializer: 'VarianceScaling',\r\n        activation: 'linear'\r\n      }));\r\n\r\n      return resolve({\r\n        'model': model,\r\n        'data': data\r\n      });\r\n    });\r\n  }\r\n\r\n  cnn = (model: any, data: any, epochs: number) => {\r\n    console.log(\"MODEL SUMMARY: \")\r\n    model.summary();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        // Optimize using adam (adaptive moment estimation) algorithm\r\n        model.compile({ optimizer: 'adam', loss: 'meanSquaredError' });\r\n\r\n        // Train the model\r\n        model.fit(data.tensorTrainX, data.tensorTrainY, { epochs: epochs }).then((result: any) => {\r\n          /*for (let i = result.epoch.length-1; i < result.epoch.length; ++i) {\r\n              print(\"Loss after Epoch \" + i + \" : \" + result.history.loss[i]);\r\n          }*/\r\n          console.log(\"Loss after last Epoch (\" + result.epoch.length + \") is: \" + result.history.loss[result.epoch.length - 1]);\r\n          resolve(model);\r\n        });\r\n      }\r\n      catch (ex) {\r\n        reject(ex);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadData = () => {\r\n    const { data, type } = this.props;\r\n    const { timePortion, epochs } = this.state;\r\n\r\n    clearPrint();\r\n    console.log(\"Beginning Stock Prediction ...\");\r\n\r\n    // Get the datetime labels use in graph\r\n    let labels = data.map((row: CountryDataRow) => row.Date);    // DATES!!!\r\n\r\n    this.setState({ isLoading: true });\r\n    // Process the data and create the train sets\r\n    processData(data, type, timePortion).then(result => {     // TIMEPORTION IS WINDOWSIZE\r\n      console.log(result);\r\n\r\n      // Crate the set for stock price prediction for the next day\r\n      let nextDayPrediction = generateNextDayPrediction(result.originalData, result.timePortion);\r\n\r\n      console.log(`nextDayPrediction`);\r\n      console.log(nextDayPrediction);\r\n\r\n      // Get the last date from the data set\r\n      // @ts-ignore\r\n      // let predictDate = (new Date(labels[labels.length - 1] + 'T00:00:00.000')).addDays(1);\r\n\r\n      // Build the Convolutional Tensorflow model\r\n      this.buildCnn(result).then((built: any) => {\r\n\r\n        // Transform the data to tensor data\r\n        // Reshape the data in neural network input format [number_of_samples, timePortion, 1];\r\n        let tensorData = {\r\n          tensorTrainX: tf.tensor1d(built.data.trainX).reshape([built.data.size, built.data.timePortion, 1]),\r\n          tensorTrainY: tf.tensor1d(built.data.trainY)\r\n        };\r\n\r\n        // Rember the min and max in order to revert (min-max scaler) the scaled data later \r\n        let max = built.data.max;\r\n        let min = built.data.min;\r\n\r\n        // Train the model using the tensor data\r\n        // Repeat multiple epochs so the error rate is smaller (better fit for the data)\r\n        this.cnn(built.model, tensorData, epochs).then((model: any) => {\r\n\r\n          // Predict for the same train data\r\n          // We gonna show the both (original, predicted) sets on the graph \r\n          // so we can see how well our model fits the data\r\n          var predictedX = model.predict(tensorData.tensorTrainX);\r\n\r\n          // Scale the next day features\r\n          let nextDayPredictionScaled = minMaxScaler(nextDayPrediction, min, max);\r\n          // Transform to tensor data\r\n          let tensorNextDayPrediction = tf.tensor1d(nextDayPredictionScaled.data).reshape([1, built.data.timePortion, 1]);\r\n          // Predict the next day stock price\r\n          let predictedValue = model.predict(tensorNextDayPrediction);\r\n\r\n          // Get the predicted data for the train set\r\n          predictedValue.data().then((predValue: any) => {\r\n            // Revert the scaled features, so we get the real values\r\n            let inversePredictedValue = minMaxInverseScaler(predValue, min, max);\r\n\r\n            // Get the next day predicted value\r\n            predictedX.data().then((pred: any) => {\r\n              // Revert the scaled feature\r\n              var predictedXInverse = minMaxInverseScaler(pred, min, max);\r\n\r\n              // Convert Float32Array to regular Array, so we can add additional value\r\n              predictedXInverse.data = Array.prototype.slice.call(predictedXInverse.data);\r\n              // Add the next day predicted stock price so it's showed on the graph\r\n              predictedXInverse.data[predictedXInverse.data.length] = inversePredictedValue.data[0];\r\n\r\n              // Revert the scaled labels from the trainY (original), \r\n              // so we can compare them with the predicted one\r\n              var trainYInverse = minMaxInverseScaler(built.data.trainY, min, max);\r\n\r\n              // Plot the original (trainY) and predicted values for the same features set (trainX)\r\n              // plotData(trainYInverse.data, predictedXInverse.data, labels);\r\n              console.log(trainYInverse.data);\r\n              // console.log(predictedXInverse.data);\r\n\r\n              this.setState({ predictedData: predictedXInverse.data, predictedDates: labels, isLoading: false });\r\n            });\r\n\r\n            // Print the predicted stock price value for the next day\r\n            // console.log(\"Predicted for date \" + moment(predictDate).format(\"DD-MM-YYYY\") + \" is: \" + inversePredictedValue.data[0].toFixed(3) + \"$\");\r\n\r\n            console.log(`Predicted Values!!`);\r\n            console.log(inversePredictedValue);\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  getSeries = () => {\r\n    const { data, type } = this.props;\r\n    const { predictedData, predictedDates, timePortion } = this.state;\r\n\r\n    let series: any = [];\r\n    let current = data.map((row: CountryDataRow) => [moment(row.Date).valueOf(), row.Confirmed]);\r\n    let predicted = null;\r\n\r\n    if (predictedData.length && predictedDates.length) {\r\n      predicted = predictedData.map((value: number, index: number) => {\r\n        let predictedValue = (index < timePortion) ? 0 : value;\r\n        return [moment(predictedDates[index]).valueOf(), predictedValue];\r\n      });\r\n    }\r\n\r\n    series.push({ type: 'area', name: type, data: current });\r\n    predicted && series.push({ type: 'line', name: `Predicted ${type}`, data: predicted, color: '#FF00FF' });\r\n\r\n    return series;\r\n  }\r\n\r\n  renderChart() {\r\n    const { width } = this.props;\r\n\r\n    const plotOptions = {\r\n      ...options,\r\n      chart: { ...options.chart, width },\r\n      series: this.getSeries()\r\n    };\r\n\r\n    return (<HighchartsReact highcharts={Highcharts} options={plotOptions} />);\r\n  }\r\n\r\n  render() {\r\n    const { isLoading } = this.state;\r\n\r\n    return (\r\n      <div className=\"covid-predictions\">\r\n        {isLoading && (<Loading size=\"lg\" message=\"Training Data\" />)}\r\n        {this.renderChart()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CovidPredictions;\r\n","import React, { Component } from 'react';\r\nimport './Footer.scss';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <div>\r\n          Covid Charts&trade; is a platform coded by &nbsp;\r\n          <a href=\"http://stuffie.azurewebsites.net/PM_Carlos-Reyes2.html\" target=\"_blank\" rel=\"noopener noreferrer\">Carlos Reyes-Rico</a>.\r\n        </div>\r\n        <div>Why?: Click <a href=\"https://github.com/reyesrico/CovidCharts/blob/master/README.md\">here</a></div>\r\n        <div>Code: <a href=\"https://github.com/reyesrico/CovidCharts\">https://github.com/reyesrico/CovidCharts</a></div>\r\n        <div>Contact and Follow Me! Twitter: <a href=\"https://twitter.com/reyesrico\">@reyesrico</a></div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './Instructions.scss';\r\n\r\nexport default class Instructions extends Component<any, any> {\r\n  render() {\r\n    const { countrySelected } = this.props;\r\n\r\n    return (\r\n      <div className=\"instructions\"> \r\n        <h4 className=\"instructions__title\">Instructions</h4>\r\n        <ol className=\"instructions__list\">\r\n          <li>Select a country</li>\r\n          <li>If country has states data: select a state</li>\r\n          <li>If country has cities data: select a city</li>\r\n        </ol>\r\n        <div className=\"instructions__examples\">\r\n          <div>Flatten Curves Examples: <b>Germany, Korea (South), United States (NY, NY)</b></div>\r\n          <button\r\n            className=\"instructions__button\"\r\n            onClick={event => event && localStorage.setItem(\"country\", countrySelected.value)}>\r\n            Save Default Country\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } \r\n}\r\n","import React, { Component } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport moment from 'moment';\r\nimport { isEqual, isEmpty } from 'lodash';\r\n\r\nimport CountryDataRow from '../types/CountryDataRow';\r\nimport MakeChartProps from '../types/MakeChartProps';\r\nimport options from '../helpers/charts';\r\n\r\nimport './MakeChart.scss';\r\n\r\n// Highcharts React wrapper\r\n// https://www.highcharts.com/blog/tutorials/highcharts-react-wrapper/\r\n\r\nclass MakeChart extends Component<MakeChartProps, any> {\r\n  state = {\r\n    series: {},\r\n    yValues: {\r\n      Confirmed: true,\r\n      Deaths: false,\r\n      Recovered: false,\r\n      Active: false,\r\n      ConfirmedInc: false,\r\n      DeathsInc: false,\r\n      RecoveredInc: false,\r\n      ActiveInc: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: MakeChartProps, prevState: any) {\r\n    const { yValues } = this.state;\r\n    if (!isEqual(prevState.yValues, yValues)) {\r\n      \r\n      if(this.yValuesFalse()) {\r\n        this.clearYValues();\r\n      } else {\r\n        this.getData();\r\n      }\r\n    }\r\n  }\r\n\r\n  clearYValues = () => {\r\n    let yValues: any = {};\r\n\r\n    Object.keys(this.state.yValues).forEach(yValue => {\r\n      const value = yValue === 'Confirmed' ? true : false;\r\n      yValues = { ...yValues, [yValue]: value };\r\n    });\r\n\r\n    this.setState({ yValues });\r\n  }\r\n\r\n  yValuesFalse = () => {\r\n    const res = Object.values(this.state.yValues).reduce((acc: boolean, val: boolean) => {\r\n      return acc || val;\r\n    });\r\n\r\n    return !res;\r\n  }\r\n\r\n  changeInput(yValue: string) {\r\n    // @ts-ignore\r\n    const value: any = this.state.yValues[yValue];\r\n\r\n    const yValues: { [key: string]: boolean } = { ...this.state.yValues };\r\n    yValues[yValue] = !value;\r\n\r\n    this.setState({ yValues });\r\n  }\r\n\r\n  renderOptions = () => {\r\n    const { yValues } = this.state;\r\n   \r\n    return (\r\n      <div className=\"make-chart__options\">\r\n        <div className=\"make-chart__values\">Values (Y Axis)</div>\r\n        {Object.keys(yValues).map((yValue: string, index: number) => {\r\n          // @ts-ignore\r\n          const checked = yValues[yValue];\r\n          return (\r\n            <div key={index}>\r\n              <input checked={checked} type=\"checkbox\" name=\"yaxis\" value={yValue} id={yValue}\r\n                onChange={event => event && this.changeInput(yValue)}/>\r\n              {yValue}\r\n            </div>);\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getData = () => {\r\n    const { data } = this.props;\r\n    const { yValues } = this.state;\r\n\r\n    if (!this.yValuesFalse()) {\r\n      let confirmed: any = [];\r\n      let deaths: any = [];\r\n      let recovered: any = [];\r\n      let active: any = [];\r\n      let confirmedInc: any = [];\r\n      let deathsInc: any = [];\r\n      let recoveredInc: any = [];\r\n      let activeInc: any = [];\r\n\r\n      data.forEach((row: CountryDataRow, index: number) => {\r\n        yValues.Confirmed && confirmed.push([moment(row.Date).valueOf(), row.Confirmed]);\r\n        yValues.Deaths && deaths.push([moment(row.Date).valueOf(), row.Deaths]);\r\n        yValues.Recovered && recovered.push([moment(row.Date).valueOf(), row.Recovered]);\r\n        yValues.Active && active.push([moment(row.Date).valueOf(), row.Active]);\r\n\r\n        // Incrementals\r\n        if (index === 0) {\r\n          yValues.ConfirmedInc && confirmedInc.push([moment(row.Date).valueOf(), 0]);\r\n          yValues.DeathsInc && deathsInc.push([moment(row.Date).valueOf(), 0]);\r\n          yValues.RecoveredInc && recoveredInc.push([moment(row.Date).valueOf(), 0]);\r\n          yValues.ActiveInc && activeInc.push([moment(row.Date).valueOf(), 0]);\r\n        } else {\r\n          let lastRow = data[index-1];\r\n          yValues.ConfirmedInc && confirmedInc.push([moment(row.Date).valueOf(), row.Confirmed - lastRow.Confirmed]);\r\n          yValues.DeathsInc && deathsInc.push([moment(row.Date).valueOf(), row.Deaths - lastRow.Deaths]);\r\n          yValues.RecoveredInc && recoveredInc.push([moment(row.Date).valueOf(), row.Recovered - lastRow.Recovered]);\r\n          yValues.ActiveInc && activeInc.push([moment(row.Date).valueOf(), row.Active - lastRow.Active]);\r\n        }\r\n      });\r\n\r\n      let series = [];\r\n      yValues.Confirmed && series.push({ type: 'area', name: 'Confirmed', data: confirmed });\r\n      yValues.Deaths && series.push({ type: 'area', name: 'Deaths', data: deaths });\r\n      yValues.Recovered && series.push({ type: 'area', name: 'Recovered', data: recovered });\r\n      yValues.Active && series.push({ type: 'area', name: 'Active', data: active });\r\n      yValues.ConfirmedInc && series.push({ type: 'area', name: 'ConfirmedInc', data: confirmedInc });\r\n      yValues.DeathsInc && series.push({ type: 'area', name: 'DeathsInc', data: deathsInc });\r\n      yValues.RecoveredInc && series.push({ type: 'area', name: 'RecoveredInc', data: recoveredInc });\r\n      yValues.ActiveInc && series.push({ type: 'area', name: 'ActiveInc', data: activeInc });\r\n\r\n      this.setState({ series });  \r\n    } \r\n  }\r\n\r\n  renderChart = () => {\r\n    const { width } = this.props;\r\n    const { series } = this.state;\r\n    const plotOptions = {\r\n      ...options,\r\n      chart: { ...options.chart, width },\r\n      series\r\n    };\r\n\r\n    if (!isEmpty(series)) {\r\n      return (<HighchartsReact highcharts={Highcharts} options={plotOptions} />);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"make-chart\">\r\n        {this.renderOptions()}\r\n        <hr />\r\n        {this.renderChart()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MakeChart;\r\n","import * as tf from '@tensorflow/tfjs';\r\n\r\n// https://github.com/jinglescode/demos/tree/master/src/app/components/tfjs-timeseries-stocks\r\n    /* REAL VALUES\r\n    array = [\r\n      { date: day1, confirmed: 1 },\r\n      { date: day2, confirmed: 1 },\r\n      { date: day3, confirmed: 1 },\r\n      { date: day4, confirmed: 1 },\r\n      { date: day5, confirmed: 1 },\r\n      { date: day6, confirmed: 1 },\r\n      { date: day7, confirmed: 1 },      \r\n      { date: day8, confirmed: 2 },\r\n      { date: day9, confirmed: 3 },\r\n      { date: day10, confirmed: 10 },\r\n      ...\r\n    ]\r\n    */\r\n    \r\n\r\n    /*  INPUTS (COMPUTED SMA)\r\n    array = [\r\n      [1, 1, 1, 1, 1, 1, 1],   // Values of confirmed from day1- day7\r\n      [1, 1, 1, 1, 1, 1, 2],   // Values of confirmed from day2 - day8\r\n      [1, 1, 1, 1, 1, 2, 3],   // values of confirmed from day3 - day9\r\n      [1, 1, 1, ,1 2, 3, 10],  // values of confirmed from day4 - day10\r\n      ...\r\n    ]\r\n    */\r\n\r\n    /* OUTPUTS (COMPUTED SMA) -AVG / ARRAY INPUTS\r\n    array = [\r\n      0.999991,\r\n      0.999998,\r\n      1.2,\r\n      1.6,\r\n      5,\r\n      ...\r\n    ]\r\n\r\n    THESE VALUES ARE THE BLACK LINE !!!\r\n    */\r\nexport function computeSMA (data, type, window_size) {\r\n  let r_avgs = []\r\n  // let avg_prev = 0;\r\n  for (let i = 0; i <= data.length - window_size; i++){\r\n    let curr_avg = 0.00, t = i + window_size;\r\n    for (let k = i; k < t && k <= data.length; k++){\r\n      curr_avg += data[k][type] / window_size;\r\n    }\r\n    r_avgs.push({ set: data.slice(i, i + window_size), avg: curr_avg });\r\n    // avg_prev = curr_avg;\r\n  }\r\n\r\n  return r_avgs;\r\n}\r\n\r\n// https://raw.githubusercontent.com/jinglescode/demos/master/src/app/components/tfjs-timeseries-stocks/standalone_demo/model.js\r\nexport async function trainModel(inputs, outputs, trainingsize, window_size, n_epochs, learning_rate, n_layers, callback) {\r\n  const input_layer_shape  = window_size;\r\n  const input_layer_neurons = 100; // window_size*2; // 100 - TBR \r\n\r\n  const rnn_input_layer_features = 10; // 2; // 10B-- TBR\r\n  const rnn_input_layer_timesteps = input_layer_neurons / rnn_input_layer_features;\r\n\r\n  const rnn_input_shape  = [rnn_input_layer_features, rnn_input_layer_timesteps];\r\n  const rnn_output_neurons = 20; // 3; // 20\r\n\r\n  const rnn_batch_size = window_size;\r\n\r\n  const output_layer_shape = rnn_output_neurons;\r\n  const output_layer_neurons = 1;\r\n\r\n  const model = tf.sequential();\r\n\r\n  let X = inputs.slice(0, Math.floor(trainingsize / 100 * inputs.length));\r\n  let Y = outputs.slice(0, Math.floor(trainingsize / 100 * outputs.length));\r\n\r\n  const xs = tf.tensor2d(X, [X.length, X[0].length]).div(tf.scalar(10));\r\n  const ys = tf.tensor2d(Y, [Y.length, 1]).reshape([Y.length, 1]).div(tf.scalar(10));\r\n\r\n  model.add(tf.layers.dense({units: input_layer_neurons, inputShape: [input_layer_shape]}));\r\n  model.add(tf.layers.reshape({targetShape: rnn_input_shape}));\r\n\r\n  let lstm_cells = [];\r\n  for (let index = 0; index < n_layers; index++) {\r\n       lstm_cells.push(tf.layers.lstmCell({units: rnn_output_neurons}));\r\n  }\r\n\r\n  model.add(tf.layers.rnn({\r\n    cell: lstm_cells,\r\n    inputShape: rnn_input_shape,\r\n    returnSequences: false\r\n  }));\r\n\r\n  model.add(tf.layers.dense({units: output_layer_neurons, inputShape: [output_layer_shape]}));\r\n\r\n  model.compile({\r\n    optimizer: tf.train.adam(learning_rate),\r\n    loss: 'meanSquaredError'\r\n  });\r\n\r\n  const hist = await model.fit(xs, ys,\r\n    { batchSize: rnn_batch_size, epochs: n_epochs, callbacks: {\r\n      onEpochEnd: async (epoch, log) => {\r\n        callback(epoch, log);\r\n      }\r\n    }\r\n  });\r\n\r\n  return { model: model, stats: hist };\r\n}\r\n\r\nexport function makePredictions(inputs, size, model) {\r\n    let X = inputs.slice(Math.floor(size / 100 * inputs.length), inputs.length);\r\n    const predictedResults = model.predict(tf.tensor2d(X, [X.length, X[0].length]).div(tf.scalar(10))).mul(10);\r\n    console.log(predictedResults);\r\n    return Array.from(predictedResults.dataSync());\r\n}\r\n","import React, { Component } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport moment from 'moment';\r\nimport { isEmpty, isEqual } from 'lodash';\r\n\r\nimport CountryDataRow from '../types/CountryDataRow';\r\nimport ProjectionsProps from '../types/ProjectionsProps';\r\nimport SMAType from '../types/SMAType';\r\nimport options from '../helpers/charts';\r\nimport { computeSMA, trainModel, makePredictions } from '../helpers/ProjectionsHelper.js';\r\n\r\nimport './Projections.scss';\r\n\r\nclass Projections extends Component<ProjectionsProps, any> {\r\n  state = {\r\n    projectedData: [],\r\n    trainedData: [],\r\n    modelTrained: {},\r\n    readingEpoch: 0,\r\n    windowSize: 7,\r\n    epochSize: 1000,       // or bigger\r\n    trainingSize: 70,     // Value in %\r\n    learningRate: 0.01,\r\n    hiddenLayers: 1,\r\n    predValues: [],\r\n    predTimestamps: [],\r\n    loadingTrain: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { data, type } = this.props;\r\n    const { windowSize } = this.state;\r\n\r\n    this.setState({ trainedData: computeSMA(data, type, windowSize) });\r\n  }\r\n\r\n  componentDidUpdate(prevProps: ProjectionsProps, prevState: any) {\r\n    const { data } = this.props;\r\n\r\n    if (!isEqual(prevProps.data, data)) {\r\n      this.clearState();\r\n    }\r\n  }\r\n\r\n  clearState = () => {\r\n    const { data, type } = this.props;\r\n    const { windowSize } = this.state;\r\n\r\n    this.setState({\r\n      projectedData: [],\r\n      trainedData: computeSMA(data, type, windowSize),\r\n      modelTrained: {},\r\n      readingEpoch: 0,\r\n      windowSize: 7,\r\n      epochSize: 7,\r\n      trainingSize: 70,\r\n      learningRate: 0.1,\r\n      hiddenLayers: 1,  \r\n      predValues: [],\r\n      predTimestamps: [],\r\n      loadingTrain: false  \r\n    });\r\n  }\r\n\r\n  getSeries = (showProjected: boolean) => {\r\n    const { data, type } = this.props;\r\n    const { predValues, predTimestamps, trainedData, windowSize } = this.state;\r\n\r\n    let series: any = [];\r\n    let confirmed: any = [];\r\n    let trained: any = [];\r\n    let predicted: any = [];\r\n    let counter = 0;\r\n\r\n    data.forEach((row: CountryDataRow, index: number) => {\r\n      confirmed.push([moment(row.Date).valueOf(), row[type]]);\r\n\r\n      if (index >= windowSize) {\r\n        const trainedRow: SMAType = trainedData[counter++];\r\n        trained.push([moment(row.Date).valueOf(), Math.round(trainedRow.avg)]);\r\n      }\r\n    });\r\n\r\n    if (showProjected) {\r\n      predValues.forEach((value: number, index: number) => {\r\n        predicted.push([moment(predTimestamps[index]).valueOf(), Math.round(value)]);\r\n      });\r\n    }\r\n\r\n    series.push({ type: 'area', name: type, data: confirmed });\r\n    series.push({ type: 'line', name: 'Trained', data: trained });\r\n    series.push({ type: 'line', name: 'Predicted', data: predicted, color: '#FF00FF' })\r\n\r\n    return series;\r\n  }\r\n\r\n  renderChart(showProjected: boolean = false) {\r\n    const { width } = this.props;\r\n\r\n    const plotOptions = {\r\n      ...options,\r\n      chart: { ...options.chart, width },\r\n      series: this.getSeries(showProjected)\r\n    };\r\n\r\n    return (<HighchartsReact highcharts={Highcharts} options={plotOptions} />);\r\n  }\r\n\r\n  trainModel = async () => {\r\n    const { type } = this.props;\r\n    const { trainedData, trainingSize, windowSize, epochSize, learningRate, hiddenLayers } = this.state;\r\n\r\n    this.setState({ loadingTrain: true });\r\n    let epoch_loss: any = [];\r\n\r\n    let inputs = trainedData.map((row: SMAType) => {\r\n      return row['set'].map((val: CountryDataRow) => val[type])\r\n    });\r\n\r\n    let outputs = trainedData.map((row: SMAType) => row.avg);\r\n  \r\n    let trainingsize = trainingSize;\r\n    let n_epochs = epochSize;\r\n    let learningrate = learningRate;\r\n    let n_hiddenlayers = hiddenLayers;\r\n  \r\n    let callback = (epoch: number, log: any) => {\r\n      this.setState({ readingEpoch: epoch + 1});\r\n      epoch_loss.push(log.loss);  \r\n    };\r\n  \r\n    let modelTrained = await trainModel(inputs, outputs, trainingsize, windowSize, n_epochs, learningrate, n_hiddenlayers, callback);\r\n    console.log(modelTrained);\r\n    console.log(epoch_loss);\r\n    this.setState({ modelTrained, loadingTrain: false });\r\n  }\r\n\r\n  predict = () => {\r\n    const { data, type } = this.props;\r\n    const { trainedData, trainingSize, modelTrained, windowSize } = this.state;\r\n\r\n    if (isEmpty(modelTrained)) return;\r\n\r\n    let inputs = trainedData.map((row: SMAType) => {\r\n      return row['set'].map((val: CountryDataRow) => val[type])\r\n    });\r\n\r\n    console.log(inputs);\r\n\r\n    let outputs = trainedData.map((row: SMAType) => row.avg);\r\n\r\n    console.log(outputs);\r\n\r\n    let trainingsize = trainingSize;\r\n\r\n    console.log(`data.length: ${data.length}`);\r\n    console.log(`trainedData.length: ${trainedData.length}`);\r\n    console.log(`trainingsize: ${trainingsize}`);\r\n\r\n    let outps = outputs.slice(Math.floor(trainingsize / 100 * outputs.length), outputs.length);\r\n    console.log(`outps (Expected)`);\r\n    console.log(outps);\r\n\r\n    // @ts-ignore\r\n    let pred_vals = makePredictions(inputs, trainingsize, modelTrained['model']);\r\n    console.log(`pred_vals`);   \r\n    console.log(pred_vals);\r\n\r\n     let timestamps_c = data.map(val => val.Date).splice(windowSize + Math.floor(trainingsize / 100 * outputs.length), data.length);\r\n     console.log(timestamps_c);\r\n\r\n     // THIS IS THE ULTIMATE GOAL! GET PROJECTED / PREDICTED VALUES!\r\n     this.setState({ predValues: pred_vals, predTimestamps: timestamps_c });\r\n  }\r\n\r\n  renderLoading() {\r\n    const { readingEpoch, epochSize } = this.state;\r\n\r\n    const value = Math.floor((readingEpoch/epochSize)*100); \r\n    return (\r\n      <div className=\"projections__loading\">\r\n        <div>{`Loading ${value}%`}</div>\r\n        <progress id=\"file\" max={epochSize} value={readingEpoch}></progress>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { trainedData, modelTrained, loadingTrain, predValues } = this.state;\r\n\r\n    if (!trainedData.length) return <div>Loading</div>;\r\n\r\n    return (\r\n      <div className=\"projections\">\r\n        <h3>SMA Computed</h3>\r\n        {trainedData && this.renderChart()}\r\n        <hr />\r\n        <h3>Training</h3>\r\n        <button className=\"projections__train-btn\" onClick={event => event && this.trainModel()} disabled={loadingTrain}>Train Model</button>\r\n        {loadingTrain && this.renderLoading()}\r\n        {!loadingTrain && !isEmpty(modelTrained) && (<div className=\"projections__model-trained\">Model Trained!</div>)}\r\n        <hr />\r\n        <h3>Validate</h3>\r\n        <button onClick={event => event && this.predict()} disabled={isEmpty(modelTrained)}>Predict (See Console)</button>\r\n        {!!predValues.length && this.renderChart(true)}\r\n      </div>      \r\n    )\r\n  }\r\n}\r\n\r\nexport default Projections;\r\n","import React, { Component } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport moment from 'moment';\r\nimport { isEqual } from 'lodash';\r\n\r\nimport CountryDataRow from '../types/CountryDataRow';\r\nimport ProjectionsProps from '../types/ProjectionsProps';\r\nimport options from '../helpers/charts';\r\nimport './Projections.scss';\r\n\r\n\r\nlet forecast = require('nostradamus');\r\n\r\nclass ProjectionsHW extends Component<ProjectionsProps, any> {\r\n  state = {\r\n    isLoading: false,\r\n    predictions: [],\r\n    period: 7\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getPredictions();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: ProjectionsProps) {\r\n    if (!isEqual(prevProps.data, this.props.data)) {\r\n      this.setState({\r\n        isLoading: false,\r\n        predictions: [],\r\n        period: 7\r\n      });\r\n\r\n      this.getPredictions();\r\n    }\r\n  }\r\n\r\n\r\n  getPredictions = (alpha = 0.95, beta = 0.4, gamma = 0.2, m = 7) => {\r\n    const { data, type } = this.props;\r\n    const { period } = this.state;\r\n\r\n    console.log(data);\r\n\r\n    const values = data.map((row: CountryDataRow) => row[type]);\r\n    const limit = values.length % period;\r\n    // console.log(limit);\r\n\r\n    const valuesLimited = values.slice(limit);\r\n\r\n    const predictions = forecast(valuesLimited, alpha, beta, gamma, period, period);\r\n    this.setState({ predictions });\r\n  }\r\n\r\n  getSeries = () => {\r\n    const { data, type } = this.props;\r\n    const { predictions, period } = this.state;\r\n\r\n    let series: any = [];\r\n    let dateSize = (data.length >= 2 &&\r\n      data[0].Date &&\r\n      data[1].Date &&\r\n      (moment(data[1].Date).valueOf() - moment(data[0].Date).valueOf())) || 0;\r\n    const limit = data.length % period;\r\n\r\n    let typeSeries = data.map((row: CountryDataRow) => [moment(row.Date).valueOf(), row[type]]);\r\n    let date = typeSeries?.[0]?.[0];\r\n\r\n    let predicted = predictions.map((value: number, index: number) => {\r\n      const typeIndex = index + limit;\r\n      if (typeIndex < data.length) {\r\n        date = typeSeries[typeIndex][0];\r\n      } else {\r\n        date += dateSize\r\n      }\r\n\r\n      return [date, value];\r\n    });\r\n\r\n    series.push({ type: 'area', name: type, data: typeSeries });\r\n    series.push({ type: 'line', name: `Predicted ${type}`, data: predicted, color: '#FF00FF' })\r\n\r\n    return series;\r\n  }\r\n\r\n  renderChart() {\r\n    const { width } = this.props;\r\n\r\n    const plotOptions = {\r\n      ...options,\r\n      chart: { ...options.chart, width },\r\n      series: this.getSeries()\r\n    };\r\n\r\n    return (<HighchartsReact highcharts={Highcharts} options={plotOptions} />);\r\n  }\r\n\r\n  render() {\r\n    const { predictions } = this.state;\r\n\r\n    return (\r\n    <div className=\"projections\">\r\n      <h3>Projections using Holt-Winters</h3>\r\n      {!predictions && <div>No Predictions</div>}\r\n      {predictions && !predictions.length && <div>Loading</div>}\r\n      {predictions && predictions.length && this.renderChart()}\r\n    <hr />\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default ProjectionsHW;\r\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { isEqual, sortBy } from 'lodash';\n\nimport CompareChart from './components/CompareChart';\nimport CountryDataRow from './types/CountryDataRow';\nimport CovidPredictions from './components/CovidPredictions';\nimport Footer from './components/Footer';\nimport Instructions from './components/Instructions';\nimport Loading from './components/Loading';\nimport MakeChart from './components/MakeChart';\nimport Projections from './components/Projections';\nimport ProjectionsHW from './components/ProjectionsHW';\nimport { hasProvince, hasCity, createMap, getUniqueCities, getCityData, manageCountryData, getProvinces, updateDates } from './helpers/CovidHelper';\nimport { getCountry, getCountries } from './helpers/Service';\n\nimport './App.scss';\n\nclass App extends Component<any, any> {\n  state = {\n    defaultCountrySlug: localStorage.getItem('country') || 'mexico',\n    menu: { 'fn': null },\n    all: null,\n    country: [],\n    countryData: [],\n    countries: [],\n    countrySelected: { name: null, Country: '', value: '', label: null },\n    countryCompare: { name: null, Country: '', value: '', label: null },\n    isLoading: false,\n    provinces: [],\n    provinceData: [],\n    provinceSelected: { name: null, value: '', label: null },\n    cities: [],\n    citySelected: { name: null, value: '', label: null },\n    usMap: {},\n    isError: false,\n    width: 500\n  }\n\n  componentDidMount() {\n    const { defaultCountrySlug } = this.state;\n    const windowWidth = window.innerWidth;\n    const width = windowWidth >= 500 ? 500 : (windowWidth * 0.8);\n\n    getCountries().then((res: any) => {\n      let sorted = sortBy(res.data, ['Slug']);\n      let id = 0;\n      let countries = sorted.map((row: any, index: number) => {\n        if (row.Slug === defaultCountrySlug) {\n          id = index;\n        }\n        return { ...row, value: row.Slug, label: row.Country, name: row.Slug };\n      });\n\n      this.setState({ countries, countrySelected: countries[id], countryCompare: countries[81], width });\n    });\n  }\n\n  componentDidUpdate(prevProps: any, prevState: any) {\n    if (this.state.isError) {\n      this.getCountryInfo();\n    } else if (!this.state.isLoading) {\n      if (!isEqual(prevState.countrySelected, this.state.countrySelected)) {\n        this.getCountryInfo();\n      } else {\n        if (!isEqual(prevState.provinceSelected, this.state.provinceSelected)) {\n          if (hasCity(this.state.country)) {\n            let cities = getUniqueCities(this.state.usMap, this.state.provinceSelected);\n            this.setState({ cities, citySelected: cities[0] });\n          }\n        }\n      }\n    }\n  }\n\n  getCountryInfo = () => {\n    const { countrySelected } = this.state;\n\n    this.setState({ isLoading: true, isError: false });\n\n    getCountry(countrySelected.value)\n      .then(res => {\n        const country = res.data;\n        let usMap, provinces, provinceSelected, cities, citySelected;\n\n        if (hasProvince(country)) {\n          usMap = createMap(country);\n          provinces = getProvinces(usMap);\n          provinceSelected = provinces[0];\n\n          if (hasCity(country)) {\n            cities = getUniqueCities(usMap, provinceSelected);\n            citySelected = cities[0];\n          }\n\n          this.setState({ usMap, country, cities, provinces, provinceSelected, citySelected });\n        } else {\n          this.setState({\n            country,\n            usMap: {},\n            provinceSelected: { name: null },\n            provinces: [],\n            provinceData: [],\n            citySelected: { name: null },\n            cities: []\n          });\n        }\n      })\n      .catch(() => this.setState({ isError: true }))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  getData = (country: CountryDataRow[], managed: boolean = false, changeDates: boolean = true) => {\n    const { usMap, citySelected, provinceSelected } = this.state;\n\n    let data = hasCity(country) ? getCityData(usMap, provinceSelected, citySelected) :\n      // @ts-ignore\n      hasProvince(country) ? usMap[provinceSelected.label] :\n        country;\n\n    data = changeDates ? updateDates(data) : data;\n\n    return managed ? manageCountryData(data) : data;\n  }\n\n  renderChart(country: CountryDataRow[], managed: boolean = false, compare: boolean = true) {\n    const { width } = this.state;\n\n    let data = this.getData(country, managed);\n\n    if (!data || !data.length) return <div>No data</div>;\n\n    return (\n      <AreaChart width={width} height={250} data={data}\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n        <defs>\n          <linearGradient id=\"colorDeaths\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n          </linearGradient>\n          <linearGradient id=\"colorConfirmed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis dataKey=\"Date\" />\n        <YAxis />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        <Area type=\"monotone\" dataKey=\"Confirmed\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorConfirmed)\" />\n        <Area type=\"monotone\" dataKey=\"Deaths\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorDeaths)\" />\n      </AreaChart>\n    );\n  }\n\n  renderCompareChart(countryHasProvince: boolean) {\n    const { country, countries, countryCompare, width} = this.state;\n    return (\n      <div className=\"covid__chart\">\n        <h3 className=\"covid__chart-text\">Compare with other country</h3>\n        <div className=\"covid__chart-select\">\n          <Select onChange={(countryCompare: any) => this.setState({ countryCompare })} options={countries} value={countryCompare} />\n        </div>\n        {country.length && <CompareChart data={this.getData(country, false, false)} width={width} countryCompare={countryCompare} hasProvinces={countryHasProvince} />}\n      </div>\n    );\n  }\n  \n  renderTitle = () => {\n    const { citySelected, provinceSelected, countrySelected } = this.state;\n    return citySelected?.label ?? provinceSelected?.label  ?? countrySelected.label;\n  }\n\n  render() {\n    const { country, countries, countrySelected, isLoading, provinces,\n      provinceSelected, cities, citySelected, usMap, width, isError } = this.state;\n\n    let countryText = countrySelected.label ?? 'Country';\n    if (!countries.length || isLoading) return (<Loading size=\"xl\" message={`Loading ${countryText} Data`} />);\n\n    let countryHasProvince = hasProvince(country);\n    let countryHasCity = hasCity(country);\n\n    return (\n      <div className=\"covid\">\n        <h2 className=\"covid__title\">COVID {countrySelected.label} Charts</h2>\n        <h3 className=\"covid__subtitle\">Data Source: <a href=\"https://github.com/CSSEGISandData/COVID-19\">Johns Hopkins CSSE</a></h3>\n        <Instructions countrySelected={countrySelected} />\n        {isError && <div className=\"covid__error\">Error Getting Data: Try Again</div>}\n        <div className=\"covid__dropdowns\">\n          <Select onChange={(countrySelected: any) => this.setState({ countrySelected })} options={countries} value={countrySelected} />\n          {countryHasProvince && <Select onChange={(provinceSelected: any) => this.setState({ provinceSelected })} options={provinces} value={provinceSelected} />}\n          {countryHasCity && <Select onChange={(citySelected: any) => this.setState({ citySelected })} options={cities} value={citySelected} />}\n        </div>\n        <hr />\n        <div className=\"covid__charts\">\n          <h3 className=\"covid__chart-text\">Total Confirmed and Deaths</h3>\n          {this.renderChart(country)}\n          <hr />\n          <h3 className=\"covid__chart-text\">Incremental Confirmed (To Date - One Day Before) and Deaths</h3>\n          {this.renderChart(country, true)}\n          <hr />\n          {!countryHasProvince && this.renderCompareChart(countryHasProvince)}\n          <hr />\n          <h3 className=\"covid__chart-text\">Make Your Own {this.renderTitle()} Chart</h3>\n          <MakeChart countries={countries} data={this.getData(country, false, false)} map={usMap} width={width} />\n          <hr />\n          <div className=\"covid__texts\">\n            <div className=\"covid__text\">{countrySelected.label}</div>\n            {countryHasProvince && <div className=\"covid__text\">{provinceSelected?.label}</div>}\n            {countryHasCity && <div className=\"covid__text\">{citySelected?.label}</div>}\n          </div>\n          <hr />\n          <h3 className=\"covid__chart-text\">Covid Preditions (based on StockPredictions)</h3>\n          {country.length && <CovidPredictions data={this.getData(country, false, false)} type=\"Confirmed\" width={width} />}\n          <hr />\n          <h3 className=\"covid__chart-text\">Confirmed Type Projections Holt-Winter</h3>\n          {country.length && <ProjectionsHW data={this.getData(country, false, false)} type=\"Confirmed\" width={width} />}\n          <hr />\n          <h3 className=\"covid__chart-text\">Confirmed Type Projections</h3>\n          {country.length && <Projections data={this.getData(country, false, false)} type=\"Confirmed\" width={width} />}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}