{"version":3,"sources":["components/Footer.tsx","components/Instructions.tsx","components/Loading.tsx","helpers/charts.js","components/MakeChart.tsx","helpers/CovidHelper.tsx","helpers/Service.tsx","components/CompareChart.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Footer","className","href","target","rel","Component","Instructions","countrySelected","this","props","onClick","event","localStorage","setItem","value","Loading","size","message","getSize","type","color","height","width","options","chart","zoomType","title","text","legend","enabled","xAxis","tooltip","shared","credits","plotOptions","areaspline","fillOpacity","MakeChart","state","series","yName","yConfirmed","yDeaths","yRecovered","renderOptions","checked","name","id","onChange","setState","getData","data","confirmed","deaths","recovered","forEach","row","push","moment","Date","valueOf","Confirmed","Deaths","Recovered","renderChart","isEmpty","highcharts","Highcharts","prevProps","prevState","isEqual","hasProvince","country","some","Province","hasCity","City","createMap","provinces","newRow","Object","keys","includes","getUniqueCities","map","province","label","filter","index","self","indexOf","sort","city","getCityData","manageCountryData","length","confirmedInc","deathsInc","i","lastRow","getProvinces","usMap","p","updateDates","format","headers","api","getCountry","axios","get","CompareChart","isLoading","countryData","getCountryInfo","countryCompare","hasProvinces","then","res","finally","otherCountry","Country","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","strokeDasharray","stroke","fill","App","defaultCountrySlug","getItem","menu","all","countries","provinceData","provinceSelected","cities","citySelected","managed","sorted","sortBy","Slug","windowWidth","window","innerWidth","countryText","countryHasProvince","countryHasCity","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.629bc3bf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Footer.scss';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <div>\r\n          Covid Charts&trade; is a platform coded by &nbsp;\r\n          <a href=\"http://stuffie.azurewebsites.net/PM_Carlos-Reyes2.html\" target=\"_blank\" rel=\"noopener noreferrer\">Carlos Reyes-Rico</a>.\r\n        </div>\r\n        <div>Why?: Click <a href=\"https://github.com/reyesrico/CovidCharts/blob/master/README.md\">here</a></div>\r\n        <div>Code: <a href=\"https://github.com/reyesrico/CovidCharts\">https://github.com/reyesrico/CovidCharts</a></div>\r\n        <div>Contact and Follow Me! Twitter: <a href=\"https://twitter.com/reyesrico\">@reyesrico</a></div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './Instructions.scss';\r\n\r\nexport default class Instructions extends Component<any, any> {\r\n  render() {\r\n    const { countrySelected } = this.props;\r\n\r\n    return (\r\n      <div className=\"instructions\"> \r\n        <h4 className=\"instructions__title\">Instructions</h4>\r\n        <ol className=\"instructions__list\">\r\n          <li>Select a country</li>\r\n          <li>If country has states data: select a state</li>\r\n          <li>If country has cities data: select a city</li>\r\n        </ol>\r\n        <div className=\"instructions__examples\">\r\n          <div>Flatten Curves Examples: <b>Germany, Korea (South), United States (NY, NY)</b></div>\r\n          <button\r\n            className=\"instructions__button\"\r\n            onClick={event => event && localStorage.setItem(\"country\", countrySelected.value)}>\r\n            Save Default Country\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } \r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactLoading from 'react-loading';\r\nimport { LoadingProps } from '../types/types';\r\n\r\nimport './Loading.scss';\r\n\r\nclass Loading extends Component<LoadingProps, any> {\r\n  getSize(): number {\r\n    switch(this.props.size) {\r\n      case 'sm':\r\n        return 8;\r\n      case 'md':\r\n        return 16;\r\n      case 'lg':\r\n        return 32;\r\n      case 'xl':\r\n        return 64;\r\n      default:\r\n        return 8;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { message } = this.props;\r\n    const size = this.getSize();\r\n\r\n    return (\r\n      <div className=\"stuffie-loading\">\r\n        <ReactLoading type=\"spin\" color=\"#00f\" height={size} width={size} />\r\n        {message && (<div className=\"stuffie-loading__message\">{message}</div>)} \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n ","const legend = {\r\n  enabled: false\r\n};\r\n\r\nconst options = {\r\n  chart: { width: 500, height: 250, zoomType: 'x' },\r\n  title: { text: '' },\r\n  legend,\r\n  xAxis: { type: 'datetime' },\r\n  tooltip: { shared: true },\r\n  credits: { enabled: false },\r\n  plotOptions: {\r\n    areaspline: { fillOpacity: 0.1 }\r\n  }\r\n};\r\n\r\nexport default options;\r\n","import React, { Component } from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport moment from 'moment';\r\nimport { isEqual, isEmpty } from 'lodash';\r\n\r\nimport options from '../helpers/charts';\r\nimport { MakeChartProps, CountryDataRow } from '../types/types';\r\n\r\nimport './MakeChart.scss';\r\n\r\n// Highcharts React wrapper\r\n// https://www.highcharts.com/blog/tutorials/highcharts-react-wrapper/\r\n\r\nclass MakeChart extends Component<MakeChartProps, any> {\r\n  state = {\r\n    series: {},\r\n    yName: '',\r\n    yConfirmed: true,\r\n    yDeaths: false,\r\n    yRecovered: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: MakeChartProps, prevState: any) {\r\n    const { yConfirmed, yDeaths, yRecovered } = this.state;\r\n    if (!isEqual(prevState.yConfirmed, yConfirmed) ||\r\n        !isEqual(prevState.yDeaths, yDeaths) || \r\n        !isEqual(prevState.yRecovered, yRecovered)) {\r\n      \r\n      if(!yConfirmed && !yDeaths && !yRecovered) {\r\n        this.setState({ yConfirmed: true });\r\n      } else {\r\n        this.getData();\r\n      }\r\n    }\r\n  }\r\n\r\n  renderOptions = () => {\r\n    return (\r\n      <div className=\"make-chart__options\">\r\n        <div className=\"make-chart__values\">Values (Y Axis)</div>\r\n        <div><input checked={this.state.yConfirmed} type=\"checkbox\" name=\"yaxis\" value=\"Confirmed\" id=\"Confirmed\" onChange={event => event && this.setState({ yConfirmed: !this.state.yConfirmed })}/>Confirmed</div>\r\n        <div><input type=\"checkbox\" name=\"yaxis\" value=\"Deaths\" id=\"Deaths\" onChange={event => event && this.setState({ yDeaths: !this.state.yDeaths })}/>Deaths</div>\r\n        <div><input type=\"checkbox\" name=\"yaxis\" value=\"Recovered\" id=\"Recovered\" onChange={event => event && this.setState({ yRecovered: !this.state.yRecovered })}/>Recovered</div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getData = () => {\r\n    const { data } = this.props;\r\n    const { yConfirmed, yDeaths, yRecovered } = this.state;\r\n\r\n    if (yConfirmed || yDeaths || yRecovered) {\r\n      let confirmed: any = [];\r\n      let deaths: any = [];\r\n      let recovered: any = [];\r\n\r\n      data.forEach((row: CountryDataRow) => {\r\n        yConfirmed && confirmed.push([moment(row.Date).valueOf(), row.Confirmed]);\r\n        yDeaths && deaths.push([moment(row.Date).valueOf(), row.Deaths]);\r\n        yRecovered && recovered.push([moment(row.Date).valueOf(), row.Recovered]);\r\n      });\r\n\r\n      let series = [];\r\n      yConfirmed && series.push({ type: 'area', name: 'Confirmed', data: confirmed });\r\n      yDeaths && series.push({ type: 'area', name: 'Deaths', data: deaths });\r\n      yRecovered && series.push({ type: 'area', name: 'Recovered', data: recovered });\r\n\r\n      this.setState({ series });  \r\n    } \r\n  }\r\n\r\n  renderChart = () => {\r\n    const { series } = this.state;\r\n    const plotOptions = { ...options, series };\r\n\r\n    if (!isEmpty(series)) {\r\n      return (<HighchartsReact highcharts={Highcharts} options={plotOptions} />);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"make-chart\">\r\n        {this.renderOptions()}\r\n        <hr />\r\n        {this.renderChart()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MakeChart;\r\n","import moment from 'moment';\r\nimport { CountryDataRow } from \"../types/types\";\r\n\r\nexport const hasProvince = (country: CountryDataRow[]): boolean => {\r\n  return country && country.some((row: CountryDataRow) => row.Province !== \"\");\r\n}\r\n\r\nexport const hasCity = (country: CountryDataRow[]): boolean => {\r\n  return country && country.some((row: CountryDataRow) => row.City !== \"\");\r\n}\r\n\r\nexport const createMap = (country: CountryDataRow[]): any => {\r\n  let provinces = {};\r\n\r\n  country.forEach((row: CountryDataRow) => {\r\n    const Province = row.Province === '' ? 'Undefined' : row.Province;\r\n    const City = row.City === '' ? 'Undefined' : row.City;\r\n    const newRow = { ...row, Province, City };\r\n\r\n    let pKeys = Object.keys(provinces);\r\n\r\n    if (pKeys.includes(newRow.Province)) {\r\n      // @ts-ignore\r\n      provinces[newRow.Province].push(newRow);\r\n    } else {\r\n      provinces = { ...provinces, [newRow.Province]: [newRow] };\r\n    }\r\n  });\r\n\r\n  return provinces;\r\n}\r\n\r\nexport const getUniqueCities = (map: any, province: any) => {\r\n  let provinceData: any = map[province.label];\r\n\r\n  return provinceData.map((row: CountryDataRow) => row.City)\r\n  .filter((value: any, index: number, self: any) => self.indexOf(value) === index)\r\n  .sort()\r\n  .map((city: string) => {\r\n    return { value: city, name: city, label: city };\r\n  });\r\n}\r\n\r\nexport const getCityData = (map: any, province: any, city: any) => {\r\n  let provinceData: any = map[province.label];\r\n\r\n  return provinceData.filter((row: CountryDataRow) => row.City === city.label);\r\n}\r\n\r\nexport const manageCountryData = (country: CountryDataRow[]) => {\r\n  if (!country.length) return;\r\n\r\n  let row: CountryDataRow = country[0];\r\n\r\n  let confirmedInc: number[] = [row.Confirmed];\r\n  let deathsInc: number[] = [row.Deaths];\r\n\r\n  for(let i = 1; i < country.length; i++) {\r\n    row = country[i];\r\n    let lastRow: CountryDataRow = country[i-1];\r\n    confirmedInc[i] = row.Confirmed - lastRow.Confirmed;\r\n    deathsInc[i] = row.Deaths - lastRow.Deaths;\r\n  }\r\n\r\n  let countryData = country.map((row: CountryDataRow, index: number) => {\r\n    return { ...row, Confirmed: confirmedInc[index], Deaths: deathsInc[index] };\r\n  });\r\n\r\n  return countryData;\r\n}\r\n\r\nexport const getProvinces = (usMap: any) => {\r\n  return Object.keys(usMap).sort().map((p: string) => {\r\n    return { name: p, label: p, value: p };\r\n  });\r\n}\r\n\r\nexport const updateDates = (data: CountryDataRow[]) => {\r\n  return data.map((row: CountryDataRow) => {\r\n    return { ...row, Date: moment(row.Date).format(\"MMM Do\")};\r\n  });\r\n}\r\n","import axios from 'axios';\r\n\r\nconst headers = {\r\n    'cache-control': 'no-cache',\r\n    'x-apikey': '5c932ad1cac6621685acc11e'\r\n};\r\n\r\nconst api = {\r\n  default: () => `https://api.covid19api.com/`,\r\n  all: () => `https://api.covid19api.com/all`,\r\n  countries: () => `https://api.covid19api.com/countries`,\r\n  country: (country: string) => `https://api.covid19api.com/dayone/country/${country}`,  \r\n};\r\n\r\nexport const getDefault = () => (\r\n  axios.get(api.default(), { headers })\r\n);\r\n\r\nexport const getAll = () => (\r\n  axios.get(api.all(), { headers })\r\n);\r\n\r\nexport const getCountry = (country: string) => (\r\n  axios.get(api.country(country), { headers })\r\n);\r\n\r\nexport const getCountries = () => (\r\n  axios.get(api.countries(), { headers })\r\n);\r\n","import React, { Component } from 'react';\r\nimport { isEqual } from 'lodash';\r\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\r\n\r\nimport { CountryDataRow, CompareChartProps } from '../types/types';\r\nimport { getCountry } from '../helpers/Service';\r\nimport { updateDates } from '../helpers/CovidHelper';\r\n\r\nclass CompareChart extends Component<CompareChartProps, any> {\r\n  state = {\r\n    isLoading: false,\r\n    countryData: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCountryInfo();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: CompareChartProps) {\r\n    const { countryCompare } = this.props;\r\n\r\n    if (!isEqual(prevProps.countryCompare, countryCompare)) {\r\n      this.getCountryInfo();\r\n    }\r\n  }\r\n\r\n  getCountryInfo = () => {\r\n    const { countryCompare, hasProvinces } = this.props;\r\n    this.setState({ countryData: [] });\r\n\r\n    if (!hasProvinces) {\r\n      this.setState({ isLoading: true });\r\n\r\n      getCountry(countryCompare.value)\r\n      .then(res => this.setState({ countryData: res.data }))\r\n      .finally(() => this.setState({ isLoading: false }));\r\n    }\r\n  }\r\n\r\n  getData = () => {\r\n    const { data, countryCompare } = this.props;\r\n    const { countryData } = this.state;\r\n\r\n    let series: any = [];\r\n\r\n    if(data.length && countryData.length) {\r\n      let map: any = {};\r\n\r\n      countryData.forEach((row: CountryDataRow) => {\r\n        map = { ...map, [row.Date]: row };\r\n      });\r\n\r\n      series = data.map((row: CountryDataRow) => {\r\n        let otherCountry: CountryDataRow = map[row.Date];\r\n        return {\r\n          [row.Country]: row.Confirmed,\r\n          [countryCompare.label]: otherCountry ? otherCountry.Confirmed : 0,\r\n          Date: row.Date\r\n        };\r\n      });\r\n    }\r\n\r\n    return series;\r\n  }\r\n\r\n\r\n  renderChart = () => {\r\n    const { width } = this.props;\r\n    let data = this.getData();\r\n\r\n    if (!data || !data.length) return <div>Data no available</div>;\r\n\r\n    data = updateDates(data);\r\n    let keys = Object.keys(data[0]);\r\n\r\n    return (\r\n      <AreaChart width={width} height={250} data={data}\r\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\r\n        <defs>\r\n          <linearGradient id=\"color1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\r\n            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\r\n          </linearGradient>\r\n          <linearGradient id=\"color2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\r\n            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\r\n          </linearGradient>\r\n        </defs>\r\n        <XAxis dataKey=\"Date\" />\r\n        <YAxis />\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <Tooltip />\r\n        <Area type=\"monotone\" dataKey={keys[0]} stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#color1)\" />\r\n        <Area type=\"monotone\" dataKey={keys[1]} stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#color2)\" />\r\n      </AreaChart>);\r\n  }\r\n\r\n  render() {\r\n    const { hasProvinces } = this.props;\r\n\r\n    if (hasProvinces) return <div>Country not available to compare</div>;\r\n\r\n    return (\r\n      <div>\r\n        {this.renderChart()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CompareChart;","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { isEqual, sortBy } from 'lodash';\n\nimport Footer from './components/Footer';\nimport Instructions from './components/Instructions';\nimport Loading from './components/Loading';\nimport MakeChart from './components/MakeChart';\nimport { CountryDataRow } from './types/types';\nimport { hasProvince, hasCity, createMap, getUniqueCities, getCityData, manageCountryData, getProvinces, updateDates } from './helpers/CovidHelper';\nimport { getCountry, getCountries } from './helpers/Service';\n\nimport './App.scss';\nimport CompareChart from './components/CompareChart';\n\nclass App extends Component<any, any> {\n  state = {\n    defaultCountrySlug: localStorage.getItem('country') || 'mexico',\n    menu: { 'fn': null },\n    all: null,\n    country: [],\n    countryData: [],\n    countries: [],\n    countrySelected: { name: null, Country: '', value: '', label: null },\n    countryCompare: { name: null, Country: '', value: '', label: null },\n    isLoading: false,\n    provinces: [],\n    provinceData: [],\n    provinceSelected: { name: null, value: '', label: null },\n    cities: [],\n    citySelected: { name: null, value: '', label: null },\n    usMap: {}\n  }\n\n  componentDidMount() {\n    const { defaultCountrySlug } = this.state;\n\n    getCountries().then((res: any) => {\n      let sorted = sortBy(res.data, ['Slug']);\n      let id = 0;\n      let countries = sorted.map((row: any, index: number) => {\n        if (row.Slug === defaultCountrySlug) {\n          id = index;\n        }\n        return { ...row, value: row.Slug, label: row.Country, name: row.Slug };\n      });\n\n      this.setState({ countries, countrySelected: countries[id], countryCompare: countries[0] });\n    });\n  }\n\n  componentDidUpdate(prevProps: any, prevState: any) {\n    if (!this.state.isLoading) {\n      if(!isEqual(prevState.countrySelected, this.state.countrySelected)) {\n        this.getCountryInfo();\n      } else {\n        if (!isEqual(prevState.provinceSelected, this.state.provinceSelected)) {\n          if (hasCity(this.state.country)) {\n            let cities = getUniqueCities(this.state.usMap, this.state.provinceSelected);\n            this.setState({ cities, citySelected: cities[0] });\n          }\n        }\n      }  \n    }\n  }\n\n  getCountryInfo = () => {\n    const { countrySelected } = this.state;\n\n    this.setState({ isLoading: true });\n\n    getCountry(countrySelected.value)\n    .then(res => {\n      const country = res.data;\n      let usMap, provinces, provinceSelected, cities, citySelected;\n\n      if (hasProvince(country)) {\n        usMap = createMap(country);\n        provinces = getProvinces(usMap);\n        provinceSelected = provinces[0];\n\n        if (hasCity(country)) {\n          cities = getUniqueCities(usMap, provinceSelected);\n          citySelected = cities[0];  \n        }\n\n        this.setState({ usMap, country, cities, provinces, provinceSelected, citySelected });\n      } else {\n        this.setState({\n          country,\n          usMap: {},\n          provinceSelected: { name: null },\n          provinces: [],\n          provinceData: [],\n          citySelected: { name: null },\n          cities: []\n        });\n      }\n    })\n    .finally(() => this.setState({ isLoading: false }));\n  }\n\n  getData = (country: CountryDataRow[], managed: boolean = false) => {\n    const { usMap, citySelected, provinceSelected } = this.state;\n\n    let data = hasCity(country)? getCityData(usMap, provinceSelected, citySelected):\n                // @ts-ignore\n               hasProvince(country)? usMap[provinceSelected.label]:\n               country;\n\n    data = updateDates(data);\n\n    return managed ? manageCountryData(data) : data;\n  }\n\n  renderChart(country: CountryDataRow[], managed: boolean = false, compare: boolean = true) {\n    let data = this.getData(country, managed);\n\n    if (!data || !data.length) return <div>No data</div>;\n\n    const windowWidth = window.innerWidth;\n    const width = windowWidth >= 500 ? 500 : (windowWidth * 0.8); \n\n    return (\n      <AreaChart width={width} height={250} data={data}\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n      <defs>\n        <linearGradient id=\"colorDeaths\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n          <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n        </linearGradient>\n        <linearGradient id=\"colorConfirmed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n          <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n        </linearGradient>\n      </defs>\n      <XAxis dataKey=\"Date\" />\n      <YAxis />\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <Tooltip />\n      <Area type=\"monotone\" dataKey=\"Confirmed\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorConfirmed)\" />\n      <Area type=\"monotone\" dataKey=\"Deaths\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorDeaths)\" />\n    </AreaChart>\n    );\n  }\n\n  render() {\n    const { country, countries, countrySelected, isLoading, provinces, provinceSelected, cities, citySelected, usMap, countryCompare } = this.state;\n\n    let countryText = countrySelected.label ?? 'Country';\n    if (!countries.length || isLoading) return (<Loading size=\"xl\" message={`Loading ${countryText} Data`} />);\n\n    let countryHasProvince = hasProvince(country);\n    let countryHasCity = hasCity(country);\n\n    return (\n      <div className=\"covid\">\n        <h2 className=\"covid__title\">COVID {countrySelected.label} Charts</h2>\n        <Instructions countrySelected={countrySelected} />\n        <div className=\"covid__dropdowns\">\n          <Select onChange={(countrySelected: any) => this.setState({ countrySelected })} options={countries} value={countrySelected} />\n          {countryHasProvince && <Select onChange={(provinceSelected: any) => this.setState({ provinceSelected })} options={provinces} value={provinceSelected} />}\n          {countryHasCity && <Select onChange={(citySelected: any ) => this.setState({ citySelected })} options={cities} value={citySelected} />}\n        </div>\n        <hr />\n        <div className=\"covid__charts\">\n          <h3 className=\"covid__chart-text\">Total Confirmed and Deaths</h3>\n          {this.renderChart(country)}\n          <hr />\n          <h3 className=\"covid__chart-text\">Incremental Confirmed (To Date - One Day Before) and Deaths</h3>\n          {this.renderChart(country, true)}\n          <h3 className=\"covid__chart-text\">Compare Confirmed with other country</h3>\n          <div className=\"covid__chart-select\">\n            <Select onChange={(countryCompare: any) => this.setState({ countryCompare })} options={countries} value={countryCompare} />\n          </div>\n          {country.length && <CompareChart data={country} width={500} countryCompare={countryCompare} hasProvinces={countryHasProvince} />}\n          <hr />\n          <h3 className=\"covid__chart-text\">Make Your Own Chart</h3>\n          <MakeChart countries={countries} data={country} map={usMap} />\n          <hr />\n          <div className=\"covid__texts\">\n            <div className=\"covid__text\">{countrySelected.label}</div>\n            {countryHasProvince && <div className=\"covid__text\">{provinceSelected?.label}</div>}\n            {countryHasCity && <div className=\"covid__text\">{citySelected?.label}</div>}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}